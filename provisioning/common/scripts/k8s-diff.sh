#!/usr/bin/env bash
set -Eeuo pipefail

# Script compares two K8S states from two files with dumped K8S objects:
# - Random suffix generated by a ReplicaSet is replaced by "<hash>".
# - Random values, for example timestamps, are ignored, see bellow.
if [ $# -ne 3 ]; then
  echo "Please specify three arguments: <old state file path> <new state file path> <diff output file>"
fi

# Arguments
OLD_STATE_FILE="$1"
NEW_STATE_FILE="$2"
DIFF_FILE="$3"

# Ignored keys with dynamic values
keyEndsWith="time|timestamp|uid|at|ip|release|hash|tags|((^api)version)|revision|generation|resourceVersion"
keyContains="\.status|\.metadata.annotations|\.volumeMounts\[[0-9]+\]\.name|\.volumes\[[0-9]+\]\.name|last-applied|revision-hash"

process() {
  # Get paths
  in="$1"
  out="$in.processed.json"
  outKV="$in.processed.kv"

  # Get ReplicaSet hashes, for example "pod-template-hash: 6749584fd9" -> "6749584fd9"
  hashes=$(cat "$in" | jq '.items[] | select(.kind == "ReplicaSet") | .metadata.labels."pod-template-hash"' --raw-output)
  printf "Found ReplicaSet hashes in '$in' state:\n%s\n" $hashes

  # Replace ReplicaSet hashes, for example "api-6749584fd9-m7q5c" -> "api-<hash>"
  cp "$in" "$out"
  echo $hashes | xargs -I '{}' sed -i -E 's/-{}(-[a-zA-Z0-9]+)?/-<hash>/g' "$out"
  echo $hashes | xargs -I '{}' sed -i -E 's/{}/<hash>/g' "$out"

  # Convert to key=value pairs
  gron "$out" > "$outKV"

  # Replace array indexes json.items[123] by <kind/name>
  cp "$outKV" "$outKV.original1"
  toName=$(sed -n -E 's/^(json\.items\[[0-9]+\])\.metadata\.name = "([^"]+)";/\1|\2/p' "$outKV")
  toKind=$(sed -n -E 's/^(json\.items\[[0-9]+\])\.kind = "([^"]+)";/\1|\2/p' "$outKV")
  toKindAndName=$(echo -e "$toKind\n$toName" | awk 'BEGIN { FS=OFS=SUBSEP="|"}{arr[$1]=arr[$1] (length(arr[$1])>1?"/":"") $2 }END {for (i in arr) print i " <" arr[i] ">"}')
  printf "Item index -> kind and name:\n%s\n" "$toKindAndName"
  echo "$toKindAndName" | xargs -L 2 printf 's:\Q%s\E:%s:\0' | xargs -0 -I '{}' perl -pe '{}' -i "$outKV"

  # Regexps to remove dynamic values
  regexp="(($keyEndsWith) =)|(($keyContains).* =)"

  # Remove dynamic values
  cp "$outKV" "$outKV.original2"
  sed -E "/$regexp/Id" -i "$outKV"
  echo "Ignored dynamic lines:"
  (diff --color=always -u0 "$outKV.original2" "$outKV" | sed 's/\(.\{150\}\).*/\1.../' ) || true

  # Sort file
  sort -o "$outKV" "$outKV"
}

# Prepare files for the diff
process $OLD_STATE_FILE
process $NEW_STATE_FILE

# Diff
(diff --color=always -u0 "$OLD_STATE_FILE.processed.kv" "$NEW_STATE_FILE.processed.kv" || true) | tee "$DIFF_FILE"
