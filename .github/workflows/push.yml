name: GitHub Actions
on: [push]
env:
  # Dev docker image, must be same as in docker-compose.yml
  IMAGE: keboolabot/keboola-as-code-dev
  IMAGE_TAG: ${{ github.sha }}

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test project in KBC
  TEST_PROJECT_ID: 8614
  TEST_PROJECT_NAME: keboola-as-code-tests
  TEST_KBC_STORAGE_API_HOST: connection.keboola.com
  TEST_KBC_STORAGE_API_TOKEN: ${{ secrets.TEST_KBC_STORAGE_API_TOKEN }}
  TEST_KBC_STORAGE_API_TOKEN_MASTER: ${{ secrets.TEST_KBC_STORAGE_API_TOKEN_MASTER }}
  TEST_KBC_STORAGE_API_TOKEN_EXPIRED: ${{ secrets.TEST_KBC_STORAGE_API_TOKEN_EXPIRED }}
jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_version.outputs.tag }}
      is_semantic_tag: ${{ steps.set_version.outputs.is_semantic_tag }}
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Set version
        id: set_version
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          if [[ "${GITHUB_REF}" == refs/tags/* ]];
          then
            export TARGET_VERSION=${GITHUB_REF/refs\/tags\//}
          else
            export TARGET_VERSION="dev"
          fi
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG', target version = '$TARGET_VERSION'"
          echo "::set-output name=tag::$TAG"
          echo "::set-output name=is_semantic_tag::$IS_SEMANTIC_TAG"
          echo "::set-output name=version::$TARGET_VERSION"

  build_image:
    needs:
      - set_version
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  tests:
    needs:
      - set_version
      - build_image
    # only one parallel job allowed - used shared testing project
    concurrency:
      group: ci
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load Docker image
        uses: ./.github/actions/load-image
      - name: Tests
        run: docker-compose run --rm -u "$UID:$GID" -e TARGET_VERSION dev make ci
        env:
          TARGET_VERSION: ${{ needs.set_version.outputs.version }}

  cross-compile:
    needs:
      - set_version
      - build_image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load Docker image
        uses: ./.github/actions/load-image
      - name: Cross compile
        run: |
          mkdir -p /tmp/go-cache
          docker-compose run --rm -u "$UID:$GID" -e TARGET_VERSION -v /tmp/go-cache:/tmp/go-cache dev make build
        env:
          TARGET_VERSION: ${{ needs.set_version.outputs.version }}
      - name: Zip build cache
        if: startsWith(github.ref, 'refs/tags/') && needs.set_version.outputs.is_semantic_tag == 'true'
        run: zip -q -4 -r /tmp/go-cache.zip /tmp/go-cache
      - name: Upload build cache
        if: startsWith(github.ref, 'refs/tags/') && needs.set_version.outputs.is_semantic_tag == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: build-cache
          path: /tmp/go-cache.zip
          retention-days: 1

  release:
    needs:
      - set_version
      - build_image
      - tests
      - cross-compile
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.set_version.outputs.is_semantic_tag == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load Docker image
        uses: ./.github/actions/load-image
      - name: Load build cache
        continue-on-error: true
        uses: ./.github/actions/load-build-cache
      - name: Release
        run: docker-compose run --rm -u "$UID:$GID" -e GITHUB_TOKEN -e TARGET_VERSION -v /tmp/go-cache:/tmp/go-cache dev make release
        env:
          TARGET_VERSION: ${{ needs.set_version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release-macos:
    needs:
      - Build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: release/

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
          brew install tree
          tree
          mkdir release/darwin
          tree
          cp release/*amd64/darwin/kbc release/darwin
          tree

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          gon -log-level=debug -log-json ./gon.json
      - name: Zip up release directory
        run: |
          zip -r darwin.zip release/darwin
