package api

import (
	"fmt"
	"github.com/go-resty/resty/v2"
	"github.com/spf13/cast"
	"keboola-as-code/src/client"
	"keboola-as-code/src/model"
)

func (a *StorageApi) GetDefaultBranch() (*model.Branch, error) {
	branches, err := a.ListBranches()
	if err != nil {
		return nil, err
	}

	for _, branch := range *branches {
		if branch.IsDefault {
			return branch, nil
		}
	}

	return nil, fmt.Errorf("default branch not found")
}

func (a *StorageApi) GetBranch(branchId int) (*model.Branch, error) {
	response := a.GetBranchRequest(branchId).Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Branch), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) CreateBranch(branch *model.Branch) (*model.Job, error) {
	response := a.CreateBranchRequest(branch).Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Job), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) ListBranches() (*[]*model.Branch, error) {
	response := a.ListBranchesRequest().Send().Response()
	if response.HasResult() {
		return response.Result().(*[]*model.Branch), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) DeleteBranch(branchId int) (*model.Job, error) {
	response := a.DeleteBranchRequest(branchId).Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Job), nil
	}
	return nil, response.Error()
}

// GetBranchRequest https://keboola.docs.apiary.io/#reference/development-branches/branch-manipulation/branch-detail
func (a *StorageApi) GetBranchRequest(branchId int) *client.Request {
	branch := &model.Branch{}
	return a.
		Request(resty.MethodGet, fmt.Sprintf("dev-branches/%d", branchId)).
		SetResult(branch)
}

// CreateBranchRequest https://keboola.docs.apiary.io/#reference/development-branches/branches/create-branch
func (a *StorageApi) CreateBranchRequest(branch *model.Branch) *client.Request {
	job := &model.Job{}
	// Id is autogenerated
	if branch.Id != 0 {
		panic("branch id is set but it should be auto-generated")
	}

	// Default branch cannot be created
	if branch.IsDefault {
		panic("default branch still exists, cannot be created")
	}

	// Create request
	request := a.
		Request(resty.MethodPost, "dev-branches").
		SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetMultipartFormData(map[string]string{
			"name":        branch.Name,
			"description": branch.Description,
		}).
		SetResult(job).
		OnSuccess(waitForSuccessJob(a, job, func(response *client.Response) *client.Response {
			// Set branch id from job results
			branch.Id = cast.ToInt(job.Results["id"])
			return response
		}))

	return request
}

// ListBranchesRequest https://keboola.docs.apiary.io/#reference/development-branches/branches/list-branches
func (a *StorageApi) ListBranchesRequest() *client.Request {
	branches := make([]*model.Branch, 0)
	return a.
		Request(resty.MethodGet, "dev-branches").
		SetResult(&branches)

}

// DeleteBranchRequest https://keboola.docs.apiary.io/#reference/development-branches/branch-manipulation/delete-branch
func (a *StorageApi) DeleteBranchRequest(branchId int) *client.Request {
	job := &model.Job{}
	return a.Request(resty.MethodDelete, fmt.Sprintf("dev-branches/%d", branchId)).
		SetResult(job).
		OnSuccess(waitForSuccessJob(a, job, nil))
}
