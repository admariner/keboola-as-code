package api

import (
	"fmt"
	"github.com/go-resty/resty/v2"
	"keboola-as-code/src/client"
	"keboola-as-code/src/json"
	"keboola-as-code/src/model"
	"strconv"
)

func (a *StorageApi) GetConfig(branchId int, componentId string, configId string) (*model.Config, error) {
	response := a.GetConfigRequest(branchId, componentId, configId).Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) CreateConfig(config *model.Config) (*model.Config, error) {
	request, err := a.CreateConfigRequest(config)
	if err != nil {
		return nil, err
	}

	response := request.Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) UpdateConfig(config *model.Config, changed []string) (*model.Config, error) {
	request, err := a.UpdateConfigRequest(config, changed)
	if err != nil {
		return nil, err
	}

	response := request.Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

// DeleteConfig - only config in main branch can be deleted!
func (a *StorageApi) DeleteConfig(componentId string, configId string) *client.Response {
	return a.DeleteConfigRequest(componentId, configId).Send().Response()
}

// GetConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/development-branch-configuration-detail
func (a *StorageApi) GetConfigRequest(branchId int, componentId string, configId string) *client.Request {
	return a.
		NewRequest(resty.MethodGet, "branch/{branchId}/components/{componentId}/configs/{configId}").
		SetPathParam("branchId", strconv.Itoa(branchId)).
		SetPathParam("componentId", componentId).
		SetPathParam("configId", configId).
		SetResult(&model.Config{
			BranchId:    branchId,
			ComponentId: componentId,
		})
}

// CreateConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/component-configurations/create-development-branch-configuration
func (a *StorageApi) CreateConfigRequest(config *model.Config) (*client.Request, error) {
	// Id is autogenerated
	if config.Id != "" {
		panic("config id is set but it should be auto-generated")
	}

	// Encode config
	configJson, err := json.Encode(config.Config, false)
	if err != nil {
		panic(fmt.Errorf(`cannot JSON encode config configuration: %s`, err))
	}

	// Create config
	var configRequest *client.Request
	configRequest = a.
		NewRequest(resty.MethodPost, "branch/{branchId}/components/{componentId}/configs").
		SetPathParam("branchId", strconv.Itoa(config.BranchId)).
		SetPathParam("componentId", config.ComponentId).
		SetBody(map[string]string{
			"name":              config.Name,
			"description":       config.Description,
			"changeDescription": config.ChangeDescription,
			"configuration":     string(configJson),
		}).
		SetResult(config).
		// Create config rows
		OnSuccess(func(response *client.Response) *client.Response {
			for _, row := range config.Rows {
				row.BranchId = config.BranchId
				row.ComponentId = config.ComponentId
				row.ConfigId = config.Id
				rowRequest, err := a.CreateConfigRowRequest(row)
				if err != nil {
					response.SetError(err)
					return response
				}
				configRequest.WaitFor(rowRequest)
				response.Sender().Request(rowRequest).Send()
			}
			return response
		})

	return configRequest, nil
}

// UpdateConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/update-development-branch-configuration
func (a *StorageApi) UpdateConfigRequest(config *model.Config, changed []string) (*client.Request, error) {
	// Id is required
	if config.Id == "" {
		panic("config id must be set")
	}

	// Encode config to JSON
	configJson, err := json.Encode(config.Config, false)
	if err != nil {
		panic(fmt.Errorf(`cannot JSON encode config configuration: %s`, err))
	}

	// Data
	all := map[string]string{
		"name":              config.Name,
		"description":       config.Description,
		"changeDescription": config.ChangeDescription,
		"configuration":     string(configJson),
	}

	// Update config
	request := a.
		NewRequest(resty.MethodPut, "branch/{branchId}/components/{componentId}/configs/{configId}").
		SetPathParam("branchId", strconv.Itoa(config.BranchId)).
		SetPathParam("componentId", config.ComponentId).
		SetPathParam("configId", config.Id).
		SetBody(getChangedValues(all, changed)).
		SetResult(config)

	return request, nil
}

// DeleteConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/delete-configuration
// Only config in main branch can be deleted!
func (a *StorageApi) DeleteConfigRequest(componentId string, configId string) *client.Request {
	return a.NewRequest(resty.MethodDelete, "components/{componentId}/configs/{configId}").
		SetPathParam("componentId", componentId).
		SetPathParam("configId", configId)
}

func (a *StorageApi) DeleteConfigsInBranchRequest(branchId int) *client.Request {
	return a.ListComponentsRequest(branchId).
		OnSuccess(func(response *client.Response) *client.Response {
			for _, component := range *response.Result().(*[]*model.Component) {
				for _, config := range component.Configs {
					response.
						Sender().
						Request(a.DeleteConfigRequest(config.ComponentId, config.Id)).
						Send()
				}
			}
			return response
		})
}
