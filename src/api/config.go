package api

import (
	"fmt"
	"github.com/go-resty/resty/v2"
	"keboola-as-code/src/client"
	"keboola-as-code/src/json"
	"keboola-as-code/src/model"
)

func (a *StorageApi) GetConfig(branchId int, componentId string, configId string) (*model.Config, error) {
	response := a.GetConfigRequest(branchId, componentId, configId).Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) CreateConfig(config *model.Config) (*model.Config, error) {
	request, err := a.CreateConfigRequest(config)
	if err != nil {
		return nil, err
	}

	response := request.Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

func (a *StorageApi) UpdateConfig(config *model.Config) (*model.Config, error) {
	request, err := a.UpdateConfigRequest(config)
	if err != nil {
		return nil, err
	}

	response := request.Send().Response()
	if response.HasResult() {
		return response.Result().(*model.Config), nil
	}
	return nil, response.Error()
}

// DeleteConfig - only config in main branch can be deleted!
func (a *StorageApi) DeleteConfig(componentId string, configId string) *client.Response {
	return a.DeleteConfigRequest(componentId, configId).Send().Response()
}

// GetConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/development-branch-configuration-detail
func (a *StorageApi) GetConfigRequest(branchId int, componentId string, configId string) *client.Request {
	return a.
		Request(resty.MethodGet, fmt.Sprintf("branch/%d/components/%s/configs/%s", branchId, componentId, configId)).
		SetResult(&model.Config{
			BranchId:    branchId,
			ComponentId: componentId,
		})
}

// CreateConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/component-configurations/create-development-branch-configuration
func (a *StorageApi) CreateConfigRequest(config *model.Config) (*client.Request, error) {
	// Id is autogenerated
	if config.Id != "" {
		panic("config id is set but it should be auto-generated")
	}

	// Encode config to JSON
	configJson, err := json.Encode(config.Config, false)
	if err != nil {
		panic(fmt.Errorf(`cannot JSON encode config configuration: %s`, err))
	}

	// Create config
	request := a.
		Request(resty.MethodPost, fmt.Sprintf("branch/%d/components/%s/configs", config.BranchId, config.ComponentId)).
		SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetMultipartFormData(map[string]string{
			"name":              config.Name,
			"description":       config.Description,
			"changeDescription": config.ChangeDescription,
			"configuration":     string(configJson),
		}).
		SetResult(config)

	// Create config rows
	request.OnSuccess(func(response *client.Response) *client.Response {
		for _, row := range config.Rows {
			// Set row IDs
			row.ConfigId = config.Id
			row.BranchId = config.BranchId
			row.ComponentId = config.ComponentId

			// Create sub-request for each row
			rowRequest, err := a.CreateConfigRowRequest(row)
			if err != nil {
				response.SetError(err)
				return response
			}

			// If sub-request fail -> mark parent request failed too
			rowRequest.OnError(func(subResponse *client.Response) *client.Response {
				response.SetError(subResponse.Error())
				return subResponse
			})

			// Sent sync/async according to the Sender type
			response.Sender().Send(rowRequest)
		}
		return response
	})

	return request, nil
}

// UpdateConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/update-development-branch-configuration
func (a *StorageApi) UpdateConfigRequest(config *model.Config) (*client.Request, error) {
	// Id is required
	if config.Id == "" {
		panic("config id must be set")
	}

	// Encode config to JSON
	configJson, err := json.Encode(config.Config, false)
	if err != nil {
		panic(fmt.Errorf(`cannot JSON encode config configuration: %s`, err))
	}

	// Generate rows sort order
	var rowsSortOrder []string
	for _, row := range config.Rows {
		rowsSortOrder = append(rowsSortOrder, row.Id)
	}
	rowsSortOrderJson, err := json.Encode(rowsSortOrder, false)
	if err != nil {
		panic(fmt.Errorf(`cannot JSON encode config rows sort order: %s`, err))
	}

	// Update config
	request := a.
		Request(resty.MethodPut, fmt.Sprintf("branch/%d/components/%s/configs/%s", config.BranchId, config.ComponentId, config.Id)).
		SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetMultipartFormData(map[string]string{
			"name":              config.Name,
			"description":       config.Description,
			"changeDescription": config.ChangeDescription,
			"configuration":     string(configJson),
			"rowsSortOrder":     string(rowsSortOrderJson),
		}).
		SetResult(config)

	return request, nil
}

// DeleteConfigRequest https://keboola.docs.apiary.io/#reference/components-and-configurations/manage-configurations/delete-configuration
// Only config in main branch can be deleted!
func (a *StorageApi) DeleteConfigRequest(componentId string, configId string) *client.Request {
	return a.Request(resty.MethodDelete, fmt.Sprintf("components/%s/configs/%s", componentId, configId))
}
