// Code generated by goa v3.5.5, DO NOT EDIT.
//
// templates HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/templates --output
// ./internal/pkg/template/api

package server

import (
	"context"
	"net/http"
	"strings"

	templatesviews "github.com/keboola/keboola-as-code/internal/pkg/template/api/gen/templates/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeHealthCheckResponse returns an encoder for responses returned by the
// templates health-check endpoint.
func EncodeHealthCheckResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeIndexEndpointResponse returns an encoder for responses returned by the
// templates index endpoint.
func EncodeIndexEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*templatesviews.Index)
		enc := encoder(ctx, w)
		body := NewIndexResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeFooResponse returns an encoder for responses returned by the templates
// foo endpoint.
func EncodeFooResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFooRequest returns a decoder for requests sent to the templates foo
// endpoint.
func DecodeFooRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			storageAPIToken string
			err             error
		)
		storageAPIToken = r.Header.Get("X-StorageApi-Token")
		if storageAPIToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-StorageApi-Token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewFooPayload(storageAPIToken)
		if strings.Contains(payload.StorageAPIToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.StorageAPIToken, " ", 2)[1]
			payload.StorageAPIToken = cred
		}

		return payload, nil
	}
}
