// Code generated by goa v3.5.5, DO NOT EDIT.
//
// templates endpoints
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/design --output
// ./internal/pkg/template/api

package templates

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "templates" service endpoints.
type Endpoints struct {
	IndexEndpoint goa.Endpoint
	HealthCheck   goa.Endpoint
}

// NewEndpoints wraps the methods of the "templates" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		IndexEndpoint: NewIndexEndpointEndpoint(s),
		HealthCheck:   NewHealthCheckEndpoint(s),
	}
}

// Use applies the given middleware to all the "templates" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.IndexEndpoint = m(e.IndexEndpoint)
	e.HealthCheck = m(e.HealthCheck)
}

// NewIndexEndpointEndpoint returns an endpoint function that calls the method
// "index" of service "templates".
func NewIndexEndpointEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.IndexEndpoint(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIndex(res, "default")
		return vres, nil
	}
}

// NewHealthCheckEndpoint returns an endpoint function that calls the method
// "health-check" of service "templates".
func NewHealthCheckEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.HealthCheck(ctx)
	}
}
