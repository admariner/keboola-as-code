package config

import (
	"net/url"

	"github.com/keboola/keboola-as-code/internal/pkg/env"
	"github.com/keboola/keboola-as-code/internal/pkg/service/common/cliconfig"
	"github.com/keboola/keboola-as-code/internal/pkg/utils/errors"
	"github.com/keboola/keboola-as-code/internal/pkg/utils/strhelper"
	"github.com/keboola/keboola-as-code/internal/pkg/validator"
)

const (
	EnvPrefix = "APP_PROXY_"
)

// Config of the App Proxy.
// See "cliconfig" package for more information.
type Config struct {
	DebugLog             bool     `mapstructure:"debug-log" usage:"Enable debug log level."`
	DebugHTTP            bool     `mapstructure:"debug-http" usage:"Log HTTP client request and response bodies."`
	DatadogEnabled       bool     `mapstructure:"datadog-enabled" usage:"Enable Datadog telemetry integration."`
	DatadogDebug         bool     `mapstructure:"datadog-debug" usage:"Enable Datadog debug logs."`
	CPUProfFilePath      string   `mapstructure:"cpu-profile" usage:"Write cpu profile to the file."`
	ListenAddress        string   `mapstructure:"listen-address" usage:"API HTTP server listen address."`
	MetricsListenAddress string   `mapstructure:"metrics-listen-address" usage:"Prometheus /metrics HTTP endpoint listen address."`
	UniqueID             string   `mapstructure:"unique-id" usage:"Unique process ID, auto-generated by default."`
	PublicAddress        *url.URL `mapstructure:"public-address" usage:"Public address of the App Proxy, to generate a link URL."`
	CookieSecret         string   `mapstructure:"cookie-secret" usage:"Cookie secret needed by OAuth 2 Proxy"`
}

type Option func(c *Config)

func NewConfig() Config {
	return Config{
		DebugLog:             false,
		DebugHTTP:            false,
		DatadogEnabled:       true,
		DatadogDebug:         false,
		CPUProfFilePath:      "",
		ListenAddress:        "0.0.0.0:8000",
		MetricsListenAddress: "0.0.0.0:9000",
		UniqueID:             "",
		PublicAddress:        nil,
	}
}

func LoadFrom(args []string, envs env.Provider) (Config, error) {
	cfg := NewConfig()
	err := cfg.LoadFrom(args, envs)
	return cfg, err
}

func (c *Config) LoadFrom(args []string, envs env.Provider) error {
	return cliconfig.LoadTo(c, args, envs, EnvPrefix)
}

func (c *Config) Dump() string {
	if kvs, err := cliconfig.Dump(c); err != nil {
		panic(err)
	} else {
		return kvs.String()
	}
}

func (c *Config) Normalize() {
	if c.PublicAddress != nil {
		c.PublicAddress.Host = strhelper.NormalizeHost(c.PublicAddress.Host)
		if c.PublicAddress.Scheme == "" {
			c.PublicAddress.Scheme = "https"
		}
	}
}

func (c *Config) Validate() error {
	v := validator.New()
	errs := errors.NewMultiError()
	if c.PublicAddress == nil || c.PublicAddress.String() == "" {
		errs.Append(errors.New("public address is not set"))
	}
	if c.ListenAddress == "" {
		errs.Append(errors.New("listen address is not set"))
	} else if err := v.ValidateValue(c.ListenAddress, "hostname_port"); err != nil {
		errs.Append(errors.Errorf(`listen address "%s" is not valid`, c.ListenAddress))
	}
	if c.MetricsListenAddress == "" {
		errs.Append(errors.New("metrics listen address is not set"))
	} else if err := v.ValidateValue(c.MetricsListenAddress, "hostname_port"); err != nil {
		errs.Append(errors.Errorf(`metrics address "%s" is not valid`, c.MetricsListenAddress))
	}
	return errs.ErrorOrNil()
}

func (c Config) Apply(ops ...Option) Config {
	for _, o := range ops {
		o(&c)
	}
	return c
}

func WithPublicAddress(v *url.URL) Option {
	return func(c *Config) {
		c.PublicAddress = v
	}
}

func WithListenAddress(v string) Option {
	return func(c *Config) {
		c.ListenAddress = v
	}
}
