// Code generated by goa v3.20.1, DO NOT EDIT.
//
// apps-proxy client HTTP transport
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/appsproxy --output
// ./internal/pkg/service/appsproxy/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the apps-proxy service endpoint HTTP clients.
type Client struct {
	// APIRootIndex Doer is the HTTP client used to make requests to the
	// ApiRootIndex endpoint.
	APIRootIndexDoer goahttp.Doer

	// APIVersionIndex Doer is the HTTP client used to make requests to the
	// ApiVersionIndex endpoint.
	APIVersionIndexDoer goahttp.Doer

	// HealthCheck Doer is the HTTP client used to make requests to the HealthCheck
	// endpoint.
	HealthCheckDoer goahttp.Doer

	// Validate Doer is the HTTP client used to make requests to the Validate
	// endpoint.
	ValidateDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the apps-proxy service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		APIRootIndexDoer:    doer,
		APIVersionIndexDoer: doer,
		HealthCheckDoer:     doer,
		ValidateDoer:        doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// APIRootIndex returns an endpoint that makes HTTP requests to the apps-proxy
// service ApiRootIndex server.
func (c *Client) APIRootIndex() goa.Endpoint {
	var (
		decodeResponse = DecodeAPIRootIndexResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAPIRootIndexRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.APIRootIndexDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("apps-proxy", "ApiRootIndex", err)
		}
		return decodeResponse(resp)
	}
}

// APIVersionIndex returns an endpoint that makes HTTP requests to the
// apps-proxy service ApiVersionIndex server.
func (c *Client) APIVersionIndex() goa.Endpoint {
	var (
		decodeResponse = DecodeAPIVersionIndexResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAPIVersionIndexRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.APIVersionIndexDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("apps-proxy", "ApiVersionIndex", err)
		}
		return decodeResponse(resp)
	}
}

// HealthCheck returns an endpoint that makes HTTP requests to the apps-proxy
// service HealthCheck server.
func (c *Client) HealthCheck() goa.Endpoint {
	var (
		decodeResponse = DecodeHealthCheckResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildHealthCheckRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HealthCheckDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("apps-proxy", "HealthCheck", err)
		}
		return decodeResponse(resp)
	}
}

// Validate returns an endpoint that makes HTTP requests to the apps-proxy
// service Validate server.
func (c *Client) Validate() goa.Endpoint {
	var (
		encodeRequest  = EncodeValidateRequest(c.encoder)
		decodeResponse = DecodeValidateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildValidateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ValidateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("apps-proxy", "Validate", err)
		}
		return decodeResponse(resp)
	}
}
