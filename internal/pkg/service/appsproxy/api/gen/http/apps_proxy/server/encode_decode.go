// Code generated by goa v3.20.1, DO NOT EDIT.
//
// apps-proxy HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/appsproxy --output
// ./internal/pkg/service/appsproxy/api

package server

import (
	"context"
	"net/http"
	"strings"

	appsproxy "github.com/keboola/keboola-as-code/internal/pkg/service/appsproxy/api/gen/apps_proxy"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAPIVersionIndexResponse returns an encoder for responses returned by
// the apps-proxy ApiVersionIndex endpoint.
func EncodeAPIVersionIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*appsproxy.ServiceDetail)
		enc := encoder(ctx, w)
		body := NewAPIVersionIndexResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeHealthCheckResponse returns an encoder for responses returned by the
// apps-proxy HealthCheck endpoint.
func EncodeHealthCheckResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(string)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeValidateResponse returns an encoder for responses returned by the
// apps-proxy Validate endpoint.
func EncodeValidateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*appsproxy.Validations)
		enc := encoder(ctx, w)
		body := NewValidateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeValidateRequest returns a decoder for requests sent to the apps-proxy
// Validate endpoint.
func DecodeValidateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			storageAPIToken string
			err             error
		)
		storageAPIToken = r.Header.Get("X-StorageApi-Token")
		if storageAPIToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-StorageApi-Token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewValidatePayload(storageAPIToken)
		if strings.Contains(payload.StorageAPIToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.StorageAPIToken, " ", 2)[1]
			payload.StorageAPIToken = cred
		}

		return payload, nil
	}
}

// marshalAppsproxyConfigurationToConfigurationResponseBody builds a value of
// type *ConfigurationResponseBody from a value of type
// *appsproxy.Configuration.
func marshalAppsproxyConfigurationToConfigurationResponseBody(v *appsproxy.Configuration) *ConfigurationResponseBody {
	if v == nil {
		return nil
	}
	res := &ConfigurationResponseBody{
		ID:           v.ID,
		ClientID:     v.ClientID,
		ClientSecret: v.ClientSecret,
	}

	return res
}
