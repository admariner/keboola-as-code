// Code generated by goa v3.14.6, DO NOT EDIT.
//
// stream HTTP client types
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/buffer --output
// ./internal/pkg/service/buffer/api

package client

import (
	"unicode/utf8"

	stream "github.com/keboola/keboola-as-code/internal/pkg/service/buffer/api/gen/stream"
	"github.com/keboola/keboola-as-code/internal/pkg/service/buffer/definition/column"
	goa "goa.design/goa/v3/pkg"
)

// CreateSourceRequestBody is the type of the "stream" service "CreateSource"
// endpoint HTTP request body.
type CreateSourceRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type     string  `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceRequestBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP request body.
type UpdateSourceRequestBody struct {
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceSettingsRequestBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP request body.
type UpdateSourceSettingsRequestBody struct {
	Patch []*SettingPatchRequestBody `form:"patch,omitempty" json:"patch,omitempty" xml:"patch,omitempty"`
}

// CreateSinkRequestBody is the type of the "stream" service "CreateSink"
// endpoint HTTP request body.
type CreateSinkRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table *TableSinkRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// UpdateSinkSettingsRequestBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP request body.
type UpdateSinkSettingsRequestBody struct {
	Patch []*SettingPatchRequestBody `form:"patch,omitempty" json:"patch,omitempty" xml:"patch,omitempty"`
}

// UpdateSinkRequestBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP request body.
type UpdateSinkRequestBody struct {
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table *TableSinkRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// APIVersionIndexResponseBody is the type of the "stream" service
// "ApiVersionIndex" endpoint HTTP response body.
type APIVersionIndexResponseBody struct {
	// Name of the API
	API *string `form:"api,omitempty" json:"api,omitempty" xml:"api,omitempty"`
	// URL of the API documentation.
	Documentation *string `form:"documentation,omitempty" json:"documentation,omitempty" xml:"documentation,omitempty"`
}

// CreateSourceResponseBody is the type of the "stream" service "CreateSource"
// endpoint HTTP response body.
type CreateSourceResponseBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Task type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// URL of the task.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Task status, one of: processing, success, error
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Shortcut for status != "processing".
	IsFinished *bool `form:"isFinished,omitempty" json:"isFinished,omitempty" xml:"isFinished,omitempty"`
	// Date and time of the task creation.
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UpdateSourceResponseBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP response body.
type UpdateSourceResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks,omitempty" json:"sinks,omitempty" xml:"sinks,omitempty"`
}

// ListSourcesResponseBody is the type of the "stream" service "ListSources"
// endpoint HTTP response body.
type ListSourcesResponseBody struct {
	Sources []*SourceResponseBody `form:"sources,omitempty" json:"sources,omitempty" xml:"sources,omitempty"`
}

// GetSourceResponseBody is the type of the "stream" service "GetSource"
// endpoint HTTP response body.
type GetSourceResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks,omitempty" json:"sinks,omitempty" xml:"sinks,omitempty"`
}

// GetSourceSettingsResponseBody is the type of the "stream" service
// "GetSourceSettings" endpoint HTTP response body.
type GetSourceSettingsResponseBody []*SettingResultResponse

// UpdateSourceSettingsResponseBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP response body.
type UpdateSourceSettingsResponseBody []*SettingResultResponse

// RefreshSourceTokensResponseBody is the type of the "stream" service
// "RefreshSourceTokens" endpoint HTTP response body.
type RefreshSourceTokensResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks,omitempty" json:"sinks,omitempty" xml:"sinks,omitempty"`
}

// CreateSinkResponseBody is the type of the "stream" service "CreateSink"
// endpoint HTTP response body.
type CreateSinkResponseBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Task type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// URL of the task.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Task status, one of: processing, success, error
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Shortcut for status != "processing".
	IsFinished *bool `form:"isFinished,omitempty" json:"isFinished,omitempty" xml:"isFinished,omitempty"`
	// Date and time of the task creation.
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetSinkResponseBody is the type of the "stream" service "GetSink" endpoint
// HTTP response body.
type GetSinkResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	SinkID    *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table    *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// GetSinkSettingsResponseBody is the type of the "stream" service
// "GetSinkSettings" endpoint HTTP response body.
type GetSinkSettingsResponseBody []*SettingResultResponse

// UpdateSinkSettingsResponseBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP response body.
type UpdateSinkSettingsResponseBody []*SettingResultResponse

// ListSinksResponseBody is the type of the "stream" service "ListSinks"
// endpoint HTTP response body.
type ListSinksResponseBody struct {
	BranchID *int                `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID *string             `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Sinks    []*SinkResponseBody `form:"sinks,omitempty" json:"sinks,omitempty" xml:"sinks,omitempty"`
}

// UpdateSinkResponseBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP response body.
type UpdateSinkResponseBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Task type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// URL of the task.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Task status, one of: processing, success, error
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Shortcut for status != "processing".
	IsFinished *bool `form:"isFinished,omitempty" json:"isFinished,omitempty" xml:"isFinished,omitempty"`
	// Date and time of the task creation.
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetTaskResponseBody is the type of the "stream" service "GetTask" endpoint
// HTTP response body.
type GetTaskResponseBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Task type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// URL of the task.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Task status, one of: processing, success, error
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Shortcut for status != "processing".
	IsFinished *bool `form:"isFinished,omitempty" json:"isFinished,omitempty" xml:"isFinished,omitempty"`
	// Date and time of the task creation.
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// CreateSourceStreamSourceAlreadyExistsResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.sourceAlreadyExists" error.
type CreateSourceStreamSourceAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateSourceStreamResourceLimitReachedResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.resourceLimitReached" error.
type CreateSourceStreamResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "GetSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type DeleteSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSourceSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "GetSourceSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSourceSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSourceSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSourceSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSourceSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RefreshSourceTokensStreamSourceNotFoundResponseBody is the type of the
// "stream" service "RefreshSourceTokens" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type RefreshSourceTokensStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type CreateSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateSinkStreamSinkAlreadyExistsResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.sinkAlreadyExists" error.
type CreateSinkStreamSinkAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateSinkStreamResourceLimitReachedResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.resourceLimitReached" error.
type CreateSinkStreamResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSinkStreamSourceNotFoundResponseBody is the type of the "stream" service
// "GetSink" endpoint HTTP response body for the "stream.sourceNotFound" error.
type GetSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "GetSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type GetSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSinkSettingsStreamSourceNotFoundResponseBody is the type of the "stream"
// service "GetSinkSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSinkSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSinkSettingsStreamSinkNotFoundResponseBody is the type of the "stream"
// service "GetSinkSettings" endpoint HTTP response body for the
// "stream.sinkNotFound" error.
type GetSinkSettingsStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSinkSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSinkSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSinkSettingsStreamSinkNotFoundResponseBody is the type of the "stream"
// service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.sinkNotFound" error.
type UpdateSinkSettingsStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListSinksStreamSourceNotFoundResponseBody is the type of the "stream"
// service "ListSinks" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type ListSinksStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "UpdateSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type UpdateSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type DeleteSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "DeleteSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type DeleteSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetTaskStreamTaskNotFoundResponseBody is the type of the "stream" service
// "GetTask" endpoint HTTP response body for the "stream.taskNotFound" error.
type GetTaskStreamTaskNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// Name of error.
	Name *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskOutputsResponseBody is used to define fields on response body types.
type TaskOutputsResponseBody struct {
	// ID of the created/updated sink.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	// ID of the created/updated source.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
}

// HTTPSourceResponseBody is used to define fields on response body types.
type HTTPSourceResponseBody struct {
	// URL of the HTTP source. Contains secret used for authentication.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// VersionResponseBody is used to define fields on response body types.
type VersionResponseBody struct {
	// Version number counted from 1.
	Number *int `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// Hash of the entity state.
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// Date and time of the modification.
	ModifiedAt *string `form:"modifiedAt,omitempty" json:"modifiedAt,omitempty" xml:"modifiedAt,omitempty"`
	// Description of the change.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// DeletedEntityResponseBody is used to define fields on response body types.
type DeletedEntityResponseBody struct {
	// Date and time of deletion.
	At *string `form:"at,omitempty" json:"at,omitempty" xml:"at,omitempty"`
	// Who deleted the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by,omitempty" json:"by,omitempty" xml:"by,omitempty"`
}

// ByResponseBody is used to define fields on response body types.
type ByResponseBody struct {
	// Date and time of deletion.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// ID of the token.
	TokenID *string `form:"tokenId,omitempty" json:"tokenId,omitempty" xml:"tokenId,omitempty"`
	// ID of the user.
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Description of the user.
	UserDescription *string `form:"userDescription,omitempty" json:"userDescription,omitempty" xml:"userDescription,omitempty"`
}

// DisabledEntityResponseBody is used to define fields on response body types.
type DisabledEntityResponseBody struct {
	// Date and time of disabling.
	At *string `form:"at,omitempty" json:"at,omitempty" xml:"at,omitempty"`
	// Who disabled the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by,omitempty" json:"by,omitempty" xml:"by,omitempty"`
	// Why was the entity disabled?
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
}

// SinkResponseBody is used to define fields on response body types.
type SinkResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	SinkID    *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table    *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// TableSinkResponseBody is used to define fields on response body types.
type TableSinkResponseBody struct {
	Mapping *TableMappingResponseBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// TableMappingResponseBody is used to define fields on response body types.
type TableMappingResponseBody struct {
	TableID *string                    `form:"tableId,omitempty" json:"tableId,omitempty" xml:"tableId,omitempty"`
	Columns []*TableColumnResponseBody `form:"columns,omitempty" json:"columns,omitempty" xml:"columns,omitempty"`
}

// TableColumnResponseBody is used to define fields on response body types.
type TableColumnResponseBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey *bool `form:"primaryKey,omitempty" json:"primaryKey,omitempty" xml:"primaryKey,omitempty"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type *column.Type `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Column name.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateResponseBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateResponseBody is used to define fields on response body
// types.
type TableColumnTemplateResponseBody struct {
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	Content  *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// SourceResponseBody is used to define fields on response body types.
type SourceResponseBody struct {
	ProjectID *int    `form:"projectId,omitempty" json:"projectId,omitempty" xml:"projectId,omitempty"`
	BranchID  *int    `form:"branchId,omitempty" json:"branchId,omitempty" xml:"branchId,omitempty"`
	SourceID  *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks,omitempty" json:"sinks,omitempty" xml:"sinks,omitempty"`
}

// SettingResultResponse is used to define fields on response body types.
type SettingResultResponse struct {
	// Key path.
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Value type.
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Actual value.
	Value any `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Default value.
	DefaultValue any `form:"defaultValue,omitempty" json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	// True, if the default value is locally overwritten.
	Overwritten *bool `form:"overwritten,omitempty" json:"overwritten,omitempty" xml:"overwritten,omitempty"`
	// True, if only a super admin can modify the key.
	Protected *bool `form:"protected,omitempty" json:"protected,omitempty" xml:"protected,omitempty"`
	// Validation rules as a string definition.
	Validation *string `form:"validation,omitempty" json:"validation,omitempty" xml:"validation,omitempty"`
}

// SettingPatchRequestBody is used to define fields on request body types.
type SettingPatchRequestBody struct {
	// Key path.
	Key string `form:"key" json:"key" xml:"key"`
	// A new key value. Use null to reset the value to the default value.
	Value any `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// TableSinkRequestBody is used to define fields on request body types.
type TableSinkRequestBody struct {
	Mapping *TableMappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// TableMappingRequestBody is used to define fields on request body types.
type TableMappingRequestBody struct {
	TableID string                    `form:"tableId" json:"tableId" xml:"tableId"`
	Columns []*TableColumnRequestBody `form:"columns" json:"columns" xml:"columns"`
}

// TableColumnRequestBody is used to define fields on request body types.
type TableColumnRequestBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey bool `form:"primaryKey" json:"primaryKey" xml:"primaryKey"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type column.Type `form:"type" json:"type" xml:"type"`
	// Column name.
	Name string `form:"name" json:"name" xml:"name"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateRequestBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateRequestBody is used to define fields on request body
// types.
type TableColumnTemplateRequestBody struct {
	Language string `form:"language" json:"language" xml:"language"`
	Content  string `form:"content" json:"content" xml:"content"`
}

// NewCreateSourceRequestBody builds the HTTP request body from the payload of
// the "CreateSource" endpoint of the "stream" service.
func NewCreateSourceRequestBody(p *stream.CreateSourcePayload) *CreateSourceRequestBody {
	body := &CreateSourceRequestBody{
		Type:        string(p.Type),
		Name:        p.Name,
		Description: p.Description,
	}
	if p.SourceID != nil {
		sourceID := string(*p.SourceID)
		body.SourceID = &sourceID
	}
	return body
}

// NewUpdateSourceRequestBody builds the HTTP request body from the payload of
// the "UpdateSource" endpoint of the "stream" service.
func NewUpdateSourceRequestBody(p *stream.UpdateSourcePayload) *UpdateSourceRequestBody {
	body := &UpdateSourceRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	if p.Type != nil {
		type_ := string(*p.Type)
		body.Type = &type_
	}
	return body
}

// NewUpdateSourceSettingsRequestBody builds the HTTP request body from the
// payload of the "UpdateSourceSettings" endpoint of the "stream" service.
func NewUpdateSourceSettingsRequestBody(p *stream.UpdateSourceSettingsPayload) *UpdateSourceSettingsRequestBody {
	body := &UpdateSourceSettingsRequestBody{}
	if p.Patch != nil {
		body.Patch = make([]*SettingPatchRequestBody, len(p.Patch))
		for i, val := range p.Patch {
			body.Patch[i] = marshalStreamSettingPatchToSettingPatchRequestBody(val)
		}
	}
	return body
}

// NewCreateSinkRequestBody builds the HTTP request body from the payload of
// the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkRequestBody(p *stream.CreateSinkPayload) *CreateSinkRequestBody {
	body := &CreateSinkRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	if p.SinkID != nil {
		sinkID := string(*p.SinkID)
		body.SinkID = &sinkID
	}
	if p.Type != nil {
		type_ := string(*p.Type)
		body.Type = &type_
	}
	if p.Table != nil {
		body.Table = marshalStreamTableSinkToTableSinkRequestBody(p.Table)
	}
	return body
}

// NewUpdateSinkSettingsRequestBody builds the HTTP request body from the
// payload of the "UpdateSinkSettings" endpoint of the "stream" service.
func NewUpdateSinkSettingsRequestBody(p *stream.UpdateSinkSettingsPayload) *UpdateSinkSettingsRequestBody {
	body := &UpdateSinkSettingsRequestBody{}
	if p.Patch != nil {
		body.Patch = make([]*SettingPatchRequestBody, len(p.Patch))
		for i, val := range p.Patch {
			body.Patch[i] = marshalStreamSettingPatchToSettingPatchRequestBody(val)
		}
	}
	return body
}

// NewUpdateSinkRequestBody builds the HTTP request body from the payload of
// the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkRequestBody(p *stream.UpdateSinkPayload) *UpdateSinkRequestBody {
	body := &UpdateSinkRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	if p.Type != nil {
		type_ := string(*p.Type)
		body.Type = &type_
	}
	if p.Table != nil {
		body.Table = marshalStreamTableSinkToTableSinkRequestBody(p.Table)
	}
	return body
}

// NewAPIVersionIndexServiceDetailOK builds a "stream" service
// "ApiVersionIndex" endpoint result from a HTTP "OK" response.
func NewAPIVersionIndexServiceDetailOK(body *APIVersionIndexResponseBody) *stream.ServiceDetail {
	v := &stream.ServiceDetail{
		API:           *body.API,
		Documentation: *body.Documentation,
	}

	return v
}

// NewCreateSourceTaskAccepted builds a "stream" service "CreateSource"
// endpoint result from a HTTP "Accepted" response.
func NewCreateSourceTaskAccepted(body *CreateSourceResponseBody) *stream.Task {
	v := &stream.Task{
		ID:         stream.TaskID(*body.ID),
		Type:       *body.Type,
		URL:        *body.URL,
		Status:     *body.Status,
		IsFinished: *body.IsFinished,
		CreatedAt:  *body.CreatedAt,
		FinishedAt: body.FinishedAt,
		Duration:   body.Duration,
		Result:     body.Result,
		Error:      body.Error,
	}
	if body.Outputs != nil {
		v.Outputs = unmarshalTaskOutputsResponseBodyToStreamTaskOutputs(body.Outputs)
	}

	return v
}

// NewCreateSourceStreamSourceAlreadyExists builds a stream service
// CreateSource endpoint stream.sourceAlreadyExists error.
func NewCreateSourceStreamSourceAlreadyExists(body *CreateSourceStreamSourceAlreadyExistsResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewCreateSourceStreamResourceLimitReached builds a stream service
// CreateSource endpoint stream.resourceLimitReached error.
func NewCreateSourceStreamResourceLimitReached(body *CreateSourceStreamResourceLimitReachedResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSourceSourceOK builds a "stream" service "UpdateSource" endpoint
// result from a HTTP "OK" response.
func NewUpdateSourceSourceOK(body *UpdateSourceResponseBody) *stream.Source {
	v := &stream.Source{
		ProjectID:   stream.ProjectID(*body.ProjectID),
		BranchID:    stream.BranchID(*body.BranchID),
		SourceID:    stream.SourceID(*body.SourceID),
		Type:        stream.SourceType(*body.Type),
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.HTTP != nil {
		v.HTTP = unmarshalHTTPSourceResponseBodyToStreamHTTPSource(body.HTTP)
	}
	v.Version = unmarshalVersionResponseBodyToStreamVersion(body.Version)
	if body.Deleted != nil {
		v.Deleted = unmarshalDeletedEntityResponseBodyToStreamDeletedEntity(body.Deleted)
	}
	if body.Disabled != nil {
		v.Disabled = unmarshalDisabledEntityResponseBodyToStreamDisabledEntity(body.Disabled)
	}
	v.Sinks = make([]*stream.Sink, len(body.Sinks))
	for i, val := range body.Sinks {
		v.Sinks[i] = unmarshalSinkResponseBodyToStreamSink(val)
	}

	return v
}

// NewUpdateSourceStreamSourceNotFound builds a stream service UpdateSource
// endpoint stream.sourceNotFound error.
func NewUpdateSourceStreamSourceNotFound(body *UpdateSourceStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewListSourcesSourcesListOK builds a "stream" service "ListSources" endpoint
// result from a HTTP "OK" response.
func NewListSourcesSourcesListOK(body *ListSourcesResponseBody) *stream.SourcesList {
	v := &stream.SourcesList{}
	v.Sources = make([]*stream.Source, len(body.Sources))
	for i, val := range body.Sources {
		v.Sources[i] = unmarshalSourceResponseBodyToStreamSource(val)
	}

	return v
}

// NewGetSourceSourceOK builds a "stream" service "GetSource" endpoint result
// from a HTTP "OK" response.
func NewGetSourceSourceOK(body *GetSourceResponseBody) *stream.Source {
	v := &stream.Source{
		ProjectID:   stream.ProjectID(*body.ProjectID),
		BranchID:    stream.BranchID(*body.BranchID),
		SourceID:    stream.SourceID(*body.SourceID),
		Type:        stream.SourceType(*body.Type),
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.HTTP != nil {
		v.HTTP = unmarshalHTTPSourceResponseBodyToStreamHTTPSource(body.HTTP)
	}
	v.Version = unmarshalVersionResponseBodyToStreamVersion(body.Version)
	if body.Deleted != nil {
		v.Deleted = unmarshalDeletedEntityResponseBodyToStreamDeletedEntity(body.Deleted)
	}
	if body.Disabled != nil {
		v.Disabled = unmarshalDisabledEntityResponseBodyToStreamDisabledEntity(body.Disabled)
	}
	v.Sinks = make([]*stream.Sink, len(body.Sinks))
	for i, val := range body.Sinks {
		v.Sinks[i] = unmarshalSinkResponseBodyToStreamSink(val)
	}

	return v
}

// NewGetSourceStreamSourceNotFound builds a stream service GetSource endpoint
// stream.sourceNotFound error.
func NewGetSourceStreamSourceNotFound(body *GetSourceStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewDeleteSourceStreamSourceNotFound builds a stream service DeleteSource
// endpoint stream.sourceNotFound error.
func NewDeleteSourceStreamSourceNotFound(body *DeleteSourceStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetSourceSettingsSettingsResultOK builds a "stream" service
// "GetSourceSettings" endpoint result from a HTTP "OK" response.
func NewGetSourceSettingsSettingsResultOK(body []*SettingResultResponse) stream.SettingsResult {
	v := make([]*stream.SettingResult, len(body))
	for i, val := range body {
		v[i] = unmarshalSettingResultResponseToStreamSettingResult(val)
	}

	return v
}

// NewGetSourceSettingsStreamSourceNotFound builds a stream service
// GetSourceSettings endpoint stream.sourceNotFound error.
func NewGetSourceSettingsStreamSourceNotFound(body *GetSourceSettingsStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSourceSettingsSettingsResultOK builds a "stream" service
// "UpdateSourceSettings" endpoint result from a HTTP "OK" response.
func NewUpdateSourceSettingsSettingsResultOK(body []*SettingResultResponse) stream.SettingsResult {
	v := make([]*stream.SettingResult, len(body))
	for i, val := range body {
		v[i] = unmarshalSettingResultResponseToStreamSettingResult(val)
	}

	return v
}

// NewUpdateSourceSettingsStreamSourceNotFound builds a stream service
// UpdateSourceSettings endpoint stream.sourceNotFound error.
func NewUpdateSourceSettingsStreamSourceNotFound(body *UpdateSourceSettingsStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewRefreshSourceTokensSourceOK builds a "stream" service
// "RefreshSourceTokens" endpoint result from a HTTP "OK" response.
func NewRefreshSourceTokensSourceOK(body *RefreshSourceTokensResponseBody) *stream.Source {
	v := &stream.Source{
		ProjectID:   stream.ProjectID(*body.ProjectID),
		BranchID:    stream.BranchID(*body.BranchID),
		SourceID:    stream.SourceID(*body.SourceID),
		Type:        stream.SourceType(*body.Type),
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.HTTP != nil {
		v.HTTP = unmarshalHTTPSourceResponseBodyToStreamHTTPSource(body.HTTP)
	}
	v.Version = unmarshalVersionResponseBodyToStreamVersion(body.Version)
	if body.Deleted != nil {
		v.Deleted = unmarshalDeletedEntityResponseBodyToStreamDeletedEntity(body.Deleted)
	}
	if body.Disabled != nil {
		v.Disabled = unmarshalDisabledEntityResponseBodyToStreamDisabledEntity(body.Disabled)
	}
	v.Sinks = make([]*stream.Sink, len(body.Sinks))
	for i, val := range body.Sinks {
		v.Sinks[i] = unmarshalSinkResponseBodyToStreamSink(val)
	}

	return v
}

// NewRefreshSourceTokensStreamSourceNotFound builds a stream service
// RefreshSourceTokens endpoint stream.sourceNotFound error.
func NewRefreshSourceTokensStreamSourceNotFound(body *RefreshSourceTokensStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewCreateSinkTaskAccepted builds a "stream" service "CreateSink" endpoint
// result from a HTTP "Accepted" response.
func NewCreateSinkTaskAccepted(body *CreateSinkResponseBody) *stream.Task {
	v := &stream.Task{
		ID:         stream.TaskID(*body.ID),
		Type:       *body.Type,
		URL:        *body.URL,
		Status:     *body.Status,
		IsFinished: *body.IsFinished,
		CreatedAt:  *body.CreatedAt,
		FinishedAt: body.FinishedAt,
		Duration:   body.Duration,
		Result:     body.Result,
		Error:      body.Error,
	}
	if body.Outputs != nil {
		v.Outputs = unmarshalTaskOutputsResponseBodyToStreamTaskOutputs(body.Outputs)
	}

	return v
}

// NewCreateSinkStreamSourceNotFound builds a stream service CreateSink
// endpoint stream.sourceNotFound error.
func NewCreateSinkStreamSourceNotFound(body *CreateSinkStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewCreateSinkStreamSinkAlreadyExists builds a stream service CreateSink
// endpoint stream.sinkAlreadyExists error.
func NewCreateSinkStreamSinkAlreadyExists(body *CreateSinkStreamSinkAlreadyExistsResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewCreateSinkStreamResourceLimitReached builds a stream service CreateSink
// endpoint stream.resourceLimitReached error.
func NewCreateSinkStreamResourceLimitReached(body *CreateSinkStreamResourceLimitReachedResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetSinkSinkOK builds a "stream" service "GetSink" endpoint result from a
// HTTP "OK" response.
func NewGetSinkSinkOK(body *GetSinkResponseBody) *stream.Sink {
	v := &stream.Sink{
		ProjectID:   stream.ProjectID(*body.ProjectID),
		BranchID:    stream.BranchID(*body.BranchID),
		SourceID:    stream.SourceID(*body.SourceID),
		SinkID:      stream.SinkID(*body.SinkID),
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.Type != nil {
		type_ := stream.SinkType(*body.Type)
		v.Type = &type_
	}
	if body.Table != nil {
		v.Table = unmarshalTableSinkResponseBodyToStreamTableSink(body.Table)
	}
	v.Version = unmarshalVersionResponseBodyToStreamVersion(body.Version)
	if body.Deleted != nil {
		v.Deleted = unmarshalDeletedEntityResponseBodyToStreamDeletedEntity(body.Deleted)
	}
	if body.Disabled != nil {
		v.Disabled = unmarshalDisabledEntityResponseBodyToStreamDisabledEntity(body.Disabled)
	}

	return v
}

// NewGetSinkStreamSourceNotFound builds a stream service GetSink endpoint
// stream.sourceNotFound error.
func NewGetSinkStreamSourceNotFound(body *GetSinkStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetSinkStreamSinkNotFound builds a stream service GetSink endpoint
// stream.sinkNotFound error.
func NewGetSinkStreamSinkNotFound(body *GetSinkStreamSinkNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetSinkSettingsSettingsResultOK builds a "stream" service
// "GetSinkSettings" endpoint result from a HTTP "OK" response.
func NewGetSinkSettingsSettingsResultOK(body []*SettingResultResponse) stream.SettingsResult {
	v := make([]*stream.SettingResult, len(body))
	for i, val := range body {
		v[i] = unmarshalSettingResultResponseToStreamSettingResult(val)
	}

	return v
}

// NewGetSinkSettingsStreamSourceNotFound builds a stream service
// GetSinkSettings endpoint stream.sourceNotFound error.
func NewGetSinkSettingsStreamSourceNotFound(body *GetSinkSettingsStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetSinkSettingsStreamSinkNotFound builds a stream service GetSinkSettings
// endpoint stream.sinkNotFound error.
func NewGetSinkSettingsStreamSinkNotFound(body *GetSinkSettingsStreamSinkNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSinkSettingsSettingsResultOK builds a "stream" service
// "UpdateSinkSettings" endpoint result from a HTTP "OK" response.
func NewUpdateSinkSettingsSettingsResultOK(body []*SettingResultResponse) stream.SettingsResult {
	v := make([]*stream.SettingResult, len(body))
	for i, val := range body {
		v[i] = unmarshalSettingResultResponseToStreamSettingResult(val)
	}

	return v
}

// NewUpdateSinkSettingsStreamSourceNotFound builds a stream service
// UpdateSinkSettings endpoint stream.sourceNotFound error.
func NewUpdateSinkSettingsStreamSourceNotFound(body *UpdateSinkSettingsStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSinkSettingsStreamSinkNotFound builds a stream service
// UpdateSinkSettings endpoint stream.sinkNotFound error.
func NewUpdateSinkSettingsStreamSinkNotFound(body *UpdateSinkSettingsStreamSinkNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewListSinksSinksListOK builds a "stream" service "ListSinks" endpoint
// result from a HTTP "OK" response.
func NewListSinksSinksListOK(body *ListSinksResponseBody) *stream.SinksList {
	v := &stream.SinksList{
		BranchID: stream.BranchID(*body.BranchID),
		SourceID: stream.SourceID(*body.SourceID),
	}
	v.Sinks = make([]*stream.Sink, len(body.Sinks))
	for i, val := range body.Sinks {
		v.Sinks[i] = unmarshalSinkResponseBodyToStreamSink(val)
	}

	return v
}

// NewListSinksStreamSourceNotFound builds a stream service ListSinks endpoint
// stream.sourceNotFound error.
func NewListSinksStreamSourceNotFound(body *ListSinksStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSinkTaskOK builds a "stream" service "UpdateSink" endpoint result
// from a HTTP "OK" response.
func NewUpdateSinkTaskOK(body *UpdateSinkResponseBody) *stream.Task {
	v := &stream.Task{
		ID:         stream.TaskID(*body.ID),
		Type:       *body.Type,
		URL:        *body.URL,
		Status:     *body.Status,
		IsFinished: *body.IsFinished,
		CreatedAt:  *body.CreatedAt,
		FinishedAt: body.FinishedAt,
		Duration:   body.Duration,
		Result:     body.Result,
		Error:      body.Error,
	}
	if body.Outputs != nil {
		v.Outputs = unmarshalTaskOutputsResponseBodyToStreamTaskOutputs(body.Outputs)
	}

	return v
}

// NewUpdateSinkStreamSourceNotFound builds a stream service UpdateSink
// endpoint stream.sourceNotFound error.
func NewUpdateSinkStreamSourceNotFound(body *UpdateSinkStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewUpdateSinkStreamSinkNotFound builds a stream service UpdateSink endpoint
// stream.sinkNotFound error.
func NewUpdateSinkStreamSinkNotFound(body *UpdateSinkStreamSinkNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewDeleteSinkStreamSourceNotFound builds a stream service DeleteSink
// endpoint stream.sourceNotFound error.
func NewDeleteSinkStreamSourceNotFound(body *DeleteSinkStreamSourceNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewDeleteSinkStreamSinkNotFound builds a stream service DeleteSink endpoint
// stream.sinkNotFound error.
func NewDeleteSinkStreamSinkNotFound(body *DeleteSinkStreamSinkNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// NewGetTaskTaskOK builds a "stream" service "GetTask" endpoint result from a
// HTTP "OK" response.
func NewGetTaskTaskOK(body *GetTaskResponseBody) *stream.Task {
	v := &stream.Task{
		ID:         stream.TaskID(*body.ID),
		Type:       *body.Type,
		URL:        *body.URL,
		Status:     *body.Status,
		IsFinished: *body.IsFinished,
		CreatedAt:  *body.CreatedAt,
		FinishedAt: body.FinishedAt,
		Duration:   body.Duration,
		Result:     body.Result,
		Error:      body.Error,
	}
	if body.Outputs != nil {
		v.Outputs = unmarshalTaskOutputsResponseBodyToStreamTaskOutputs(body.Outputs)
	}

	return v
}

// NewGetTaskStreamTaskNotFound builds a stream service GetTask endpoint
// stream.taskNotFound error.
func NewGetTaskStreamTaskNotFound(body *GetTaskStreamTaskNotFoundResponseBody) *stream.GenericError {
	v := &stream.GenericError{
		StatusCode: *body.StatusCode,
		Name:       *body.Name,
		Message:    *body.Message,
	}

	return v
}

// ValidateAPIVersionIndexResponseBody runs the validations defined on
// ApiVersionIndexResponseBody
func ValidateAPIVersionIndexResponseBody(body *APIVersionIndexResponseBody) (err error) {
	if body.API == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("api", "body"))
	}
	if body.Documentation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("documentation", "body"))
	}
	return
}

// ValidateCreateSourceResponseBody runs the validations defined on
// CreateSourceResponseBody
func ValidateCreateSourceResponseBody(body *CreateSourceResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.IsFinished == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isFinished", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "processing" || *body.Status == "success" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"processing", "success", "error"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finishedAt", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.Outputs != nil {
		if err2 := ValidateTaskOutputsResponseBody(body.Outputs); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateSourceResponseBody runs the validations defined on
// UpdateSourceResponseBody
func ValidateUpdateSourceResponseBody(body *UpdateSourceResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Sinks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinks", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.HTTP != nil {
		if err2 := ValidateHTTPSourceResponseBody(body.HTTP); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sinks {
		if e != nil {
			if err2 := ValidateSinkResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListSourcesResponseBody runs the validations defined on
// ListSourcesResponseBody
func ValidateListSourcesResponseBody(body *ListSourcesResponseBody) (err error) {
	if body.Sources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sources", "body"))
	}
	for _, e := range body.Sources {
		if e != nil {
			if err2 := ValidateSourceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetSourceResponseBody runs the validations defined on
// GetSourceResponseBody
func ValidateGetSourceResponseBody(body *GetSourceResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Sinks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinks", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.HTTP != nil {
		if err2 := ValidateHTTPSourceResponseBody(body.HTTP); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sinks {
		if e != nil {
			if err2 := ValidateSinkResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRefreshSourceTokensResponseBody runs the validations defined on
// RefreshSourceTokensResponseBody
func ValidateRefreshSourceTokensResponseBody(body *RefreshSourceTokensResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Sinks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinks", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.HTTP != nil {
		if err2 := ValidateHTTPSourceResponseBody(body.HTTP); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sinks {
		if e != nil {
			if err2 := ValidateSinkResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateSinkResponseBody runs the validations defined on
// CreateSinkResponseBody
func ValidateCreateSinkResponseBody(body *CreateSinkResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.IsFinished == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isFinished", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "processing" || *body.Status == "success" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"processing", "success", "error"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finishedAt", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.Outputs != nil {
		if err2 := ValidateTaskOutputsResponseBody(body.Outputs); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetSinkResponseBody runs the validations defined on
// GetSinkResponseBody
func ValidateGetSinkResponseBody(body *GetSinkResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.SinkID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinkId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 1, true))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkResponseBody(body.Table); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListSinksResponseBody runs the validations defined on
// ListSinksResponseBody
func ValidateListSinksResponseBody(body *ListSinksResponseBody) (err error) {
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.Sinks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinks", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	for _, e := range body.Sinks {
		if e != nil {
			if err2 := ValidateSinkResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateSinkResponseBody runs the validations defined on
// UpdateSinkResponseBody
func ValidateUpdateSinkResponseBody(body *UpdateSinkResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.IsFinished == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isFinished", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "processing" || *body.Status == "success" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"processing", "success", "error"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finishedAt", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.Outputs != nil {
		if err2 := ValidateTaskOutputsResponseBody(body.Outputs); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetTaskResponseBody runs the validations defined on
// GetTaskResponseBody
func ValidateGetTaskResponseBody(body *GetTaskResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.IsFinished == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isFinished", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "processing" || *body.Status == "success" || *body.Status == "error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"processing", "success", "error"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.finishedAt", *body.FinishedAt, goa.FormatDateTime))
	}
	if body.Outputs != nil {
		if err2 := ValidateTaskOutputsResponseBody(body.Outputs); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateSourceStreamSourceAlreadyExistsResponseBody runs the
// validations defined on CreateSource_stream.sourceAlreadyExists_Response_Body
func ValidateCreateSourceStreamSourceAlreadyExistsResponseBody(body *CreateSourceStreamSourceAlreadyExistsResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateSourceStreamResourceLimitReachedResponseBody runs the
// validations defined on CreateSource_stream.resourceLimitReached_Response_Body
func ValidateCreateSourceStreamResourceLimitReachedResponseBody(body *CreateSourceStreamResourceLimitReachedResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSourceStreamSourceNotFoundResponseBody runs the validations
// defined on UpdateSource_stream.sourceNotFound_Response_Body
func ValidateUpdateSourceStreamSourceNotFoundResponseBody(body *UpdateSourceStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSourceStreamSourceNotFoundResponseBody runs the validations
// defined on GetSource_stream.sourceNotFound_Response_Body
func ValidateGetSourceStreamSourceNotFoundResponseBody(body *GetSourceStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSourceStreamSourceNotFoundResponseBody runs the validations
// defined on DeleteSource_stream.sourceNotFound_Response_Body
func ValidateDeleteSourceStreamSourceNotFoundResponseBody(body *DeleteSourceStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSourceSettingsStreamSourceNotFoundResponseBody runs the
// validations defined on GetSourceSettings_stream.sourceNotFound_Response_Body
func ValidateGetSourceSettingsStreamSourceNotFoundResponseBody(body *GetSourceSettingsStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSourceSettingsStreamSourceNotFoundResponseBody runs the
// validations defined on
// UpdateSourceSettings_stream.sourceNotFound_Response_Body
func ValidateUpdateSourceSettingsStreamSourceNotFoundResponseBody(body *UpdateSourceSettingsStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshSourceTokensStreamSourceNotFoundResponseBody runs the
// validations defined on
// RefreshSourceTokens_stream.sourceNotFound_Response_Body
func ValidateRefreshSourceTokensStreamSourceNotFoundResponseBody(body *RefreshSourceTokensStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateSinkStreamSourceNotFoundResponseBody runs the validations
// defined on CreateSink_stream.sourceNotFound_Response_Body
func ValidateCreateSinkStreamSourceNotFoundResponseBody(body *CreateSinkStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateSinkStreamSinkAlreadyExistsResponseBody runs the validations
// defined on CreateSink_stream.sinkAlreadyExists_Response_Body
func ValidateCreateSinkStreamSinkAlreadyExistsResponseBody(body *CreateSinkStreamSinkAlreadyExistsResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateSinkStreamResourceLimitReachedResponseBody runs the
// validations defined on CreateSink_stream.resourceLimitReached_Response_Body
func ValidateCreateSinkStreamResourceLimitReachedResponseBody(body *CreateSinkStreamResourceLimitReachedResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSinkStreamSourceNotFoundResponseBody runs the validations defined
// on GetSink_stream.sourceNotFound_Response_Body
func ValidateGetSinkStreamSourceNotFoundResponseBody(body *GetSinkStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSinkStreamSinkNotFoundResponseBody runs the validations defined
// on GetSink_stream.sinkNotFound_Response_Body
func ValidateGetSinkStreamSinkNotFoundResponseBody(body *GetSinkStreamSinkNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSinkSettingsStreamSourceNotFoundResponseBody runs the validations
// defined on GetSinkSettings_stream.sourceNotFound_Response_Body
func ValidateGetSinkSettingsStreamSourceNotFoundResponseBody(body *GetSinkSettingsStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSinkSettingsStreamSinkNotFoundResponseBody runs the validations
// defined on GetSinkSettings_stream.sinkNotFound_Response_Body
func ValidateGetSinkSettingsStreamSinkNotFoundResponseBody(body *GetSinkSettingsStreamSinkNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSinkSettingsStreamSourceNotFoundResponseBody runs the
// validations defined on UpdateSinkSettings_stream.sourceNotFound_Response_Body
func ValidateUpdateSinkSettingsStreamSourceNotFoundResponseBody(body *UpdateSinkSettingsStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSinkSettingsStreamSinkNotFoundResponseBody runs the
// validations defined on UpdateSinkSettings_stream.sinkNotFound_Response_Body
func ValidateUpdateSinkSettingsStreamSinkNotFoundResponseBody(body *UpdateSinkSettingsStreamSinkNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListSinksStreamSourceNotFoundResponseBody runs the validations
// defined on ListSinks_stream.sourceNotFound_Response_Body
func ValidateListSinksStreamSourceNotFoundResponseBody(body *ListSinksStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSinkStreamSourceNotFoundResponseBody runs the validations
// defined on UpdateSink_stream.sourceNotFound_Response_Body
func ValidateUpdateSinkStreamSourceNotFoundResponseBody(body *UpdateSinkStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateSinkStreamSinkNotFoundResponseBody runs the validations
// defined on UpdateSink_stream.sinkNotFound_Response_Body
func ValidateUpdateSinkStreamSinkNotFoundResponseBody(body *UpdateSinkStreamSinkNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSinkStreamSourceNotFoundResponseBody runs the validations
// defined on DeleteSink_stream.sourceNotFound_Response_Body
func ValidateDeleteSinkStreamSourceNotFoundResponseBody(body *DeleteSinkStreamSourceNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSinkStreamSinkNotFoundResponseBody runs the validations
// defined on DeleteSink_stream.sinkNotFound_Response_Body
func ValidateDeleteSinkStreamSinkNotFoundResponseBody(body *DeleteSinkStreamSinkNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTaskStreamTaskNotFoundResponseBody runs the validations defined
// on GetTask_stream.taskNotFound_Response_Body
func ValidateGetTaskStreamTaskNotFoundResponseBody(body *GetTaskStreamTaskNotFoundResponseBody) (err error) {
	if body.StatusCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statusCode", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTaskOutputsResponseBody runs the validations defined on
// TaskOutputsResponseBody
func ValidateTaskOutputsResponseBody(body *TaskOutputsResponseBody) (err error) {
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 1, true))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 48, false))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	return
}

// ValidateHTTPSourceResponseBody runs the validations defined on
// HTTPSourceResponseBody
func ValidateHTTPSourceResponseBody(body *HTTPSourceResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateVersionResponseBody runs the validations defined on
// VersionResponseBody
func ValidateVersionResponseBody(body *VersionResponseBody) (err error) {
	if body.Number == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("number", "body"))
	}
	if body.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hash", "body"))
	}
	if body.ModifiedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("modifiedAt", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Number != nil {
		if *body.Number < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.number", *body.Number, 1, true))
		}
	}
	if body.ModifiedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.modifiedAt", *body.ModifiedAt, goa.FormatDateTime))
	}
	return
}

// ValidateDeletedEntityResponseBody runs the validations defined on
// DeletedEntityResponseBody
func ValidateDeletedEntityResponseBody(body *DeletedEntityResponseBody) (err error) {
	if body.At == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("at", "body"))
	}
	if body.By == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("by", "body"))
	}
	if body.At != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.at", *body.At, goa.FormatDateTime))
	}
	if body.By != nil {
		if err2 := ValidateByResponseBody(body.By); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateByResponseBody runs the validations defined on ByResponseBody
func ValidateByResponseBody(body *ByResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "system" || *body.Type == "user") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"system", "user"}))
		}
	}
	return
}

// ValidateDisabledEntityResponseBody runs the validations defined on
// DisabledEntityResponseBody
func ValidateDisabledEntityResponseBody(body *DisabledEntityResponseBody) (err error) {
	if body.At == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("at", "body"))
	}
	if body.By == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("by", "body"))
	}
	if body.Reason == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reason", "body"))
	}
	if body.At != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.at", *body.At, goa.FormatDateTime))
	}
	if body.By != nil {
		if err2 := ValidateByResponseBody(body.By); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSinkResponseBody runs the validations defined on SinkResponseBody
func ValidateSinkResponseBody(body *SinkResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.SinkID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinkId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 1, true))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sinkId", *body.SinkID, utf8.RuneCountInString(*body.SinkID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkResponseBody(body.Table); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableSinkResponseBody runs the validations defined on
// TableSinkResponseBody
func ValidateTableSinkResponseBody(body *TableSinkResponseBody) (err error) {
	if body.Mapping != nil {
		if err2 := ValidateTableMappingResponseBody(body.Mapping); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableMappingResponseBody runs the validations defined on
// TableMappingResponseBody
func ValidateTableMappingResponseBody(body *TableMappingResponseBody) (err error) {
	if body.TableID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tableId", "body"))
	}
	if body.Columns == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("columns", "body"))
	}
	if len(body.Columns) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 1, true))
	}
	if len(body.Columns) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 100, false))
	}
	for _, e := range body.Columns {
		if e != nil {
			if err2 := ValidateTableColumnResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTableColumnResponseBody runs the validations defined on
// TableColumnResponseBody
func ValidateTableColumnResponseBody(body *TableColumnResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "id" || *body.Type == "datetime" || *body.Type == "ip" || *body.Type == "body" || *body.Type == "headers" || *body.Type == "template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"id", "datetime", "ip", "body", "headers", "template"}))
		}
	}
	if body.Template != nil {
		if err2 := ValidateTableColumnTemplateResponseBody(body.Template); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableColumnTemplateResponseBody runs the validations defined on
// TableColumnTemplateResponseBody
func ValidateTableColumnTemplateResponseBody(body *TableColumnTemplateResponseBody) (err error) {
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Language != nil {
		if !(*body.Language == "jsonnet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.language", *body.Language, []any{"jsonnet"}))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 1, true))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 4096, false))
		}
	}
	return
}

// ValidateSourceResponseBody runs the validations defined on SourceResponseBody
func ValidateSourceResponseBody(body *SourceResponseBody) (err error) {
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projectId", "body"))
	}
	if body.BranchID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("branchId", "body"))
	}
	if body.SourceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sourceId", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Sinks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sinks", "body"))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sourceId", *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.HTTP != nil {
		if err2 := ValidateHTTPSourceResponseBody(body.HTTP); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Version != nil {
		if err2 := ValidateVersionResponseBody(body.Version); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Deleted != nil {
		if err2 := ValidateDeletedEntityResponseBody(body.Deleted); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Disabled != nil {
		if err2 := ValidateDisabledEntityResponseBody(body.Disabled); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sinks {
		if e != nil {
			if err2 := ValidateSinkResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSettingResultResponse runs the validations defined on
// SettingResultResponse
func ValidateSettingResultResponse(body *SettingResultResponse) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.DefaultValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("defaultValue", "body"))
	}
	if body.Overwritten == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("overwritten", "body"))
	}
	if body.Protected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protected", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "int" || *body.Type == "float" || *body.Type == "boolean") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"string", "int", "float", "boolean"}))
		}
	}
	return
}

// ValidateSettingPatchRequestBody runs the validations defined on
// SettingPatchRequestBody
func ValidateSettingPatchRequestBody(body *SettingPatchRequestBody) (err error) {
	if utf8.RuneCountInString(body.Key) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.key", body.Key, utf8.RuneCountInString(body.Key), 1, true))
	}
	return
}

// ValidateTableSinkRequestBody runs the validations defined on
// TableSinkRequestBody
func ValidateTableSinkRequestBody(body *TableSinkRequestBody) (err error) {
	if body.Mapping != nil {
		if err2 := ValidateTableMappingRequestBody(body.Mapping); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableMappingRequestBody runs the validations defined on
// TableMappingRequestBody
func ValidateTableMappingRequestBody(body *TableMappingRequestBody) (err error) {
	if body.Columns == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("columns", "body"))
	}
	if len(body.Columns) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 1, true))
	}
	if len(body.Columns) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.columns", body.Columns, len(body.Columns), 100, false))
	}
	for _, e := range body.Columns {
		if e != nil {
			if err2 := ValidateTableColumnRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTableColumnRequestBody runs the validations defined on
// TableColumnRequestBody
func ValidateTableColumnRequestBody(body *TableColumnRequestBody) (err error) {
	if !(body.Type == "id" || body.Type == "datetime" || body.Type == "ip" || body.Type == "body" || body.Type == "headers" || body.Type == "template") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"id", "datetime", "ip", "body", "headers", "template"}))
	}
	if body.Template != nil {
		if err2 := ValidateTableColumnTemplateRequestBody(body.Template); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableColumnTemplateRequestBody runs the validations defined on
// TableColumnTemplateRequestBody
func ValidateTableColumnTemplateRequestBody(body *TableColumnTemplateRequestBody) (err error) {
	if !(body.Language == "jsonnet") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.language", body.Language, []any{"jsonnet"}))
	}
	if utf8.RuneCountInString(body.Content) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", body.Content, utf8.RuneCountInString(body.Content), 1, true))
	}
	if utf8.RuneCountInString(body.Content) > 4096 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", body.Content, utf8.RuneCountInString(body.Content), 4096, false))
	}
	return
}
