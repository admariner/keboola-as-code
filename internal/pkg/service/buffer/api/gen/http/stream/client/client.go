// Code generated by goa v3.14.6, DO NOT EDIT.
//
// stream client HTTP transport
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/buffer --output
// ./internal/pkg/service/buffer/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the stream service endpoint HTTP clients.
type Client struct {
	// APIRootIndex Doer is the HTTP client used to make requests to the
	// ApiRootIndex endpoint.
	APIRootIndexDoer goahttp.Doer

	// APIVersionIndex Doer is the HTTP client used to make requests to the
	// ApiVersionIndex endpoint.
	APIVersionIndexDoer goahttp.Doer

	// HealthCheck Doer is the HTTP client used to make requests to the HealthCheck
	// endpoint.
	HealthCheckDoer goahttp.Doer

	// CreateSource Doer is the HTTP client used to make requests to the
	// CreateSource endpoint.
	CreateSourceDoer goahttp.Doer

	// UpdateSource Doer is the HTTP client used to make requests to the
	// UpdateSource endpoint.
	UpdateSourceDoer goahttp.Doer

	// ListSources Doer is the HTTP client used to make requests to the ListSources
	// endpoint.
	ListSourcesDoer goahttp.Doer

	// GetSource Doer is the HTTP client used to make requests to the GetSource
	// endpoint.
	GetSourceDoer goahttp.Doer

	// DeleteSource Doer is the HTTP client used to make requests to the
	// DeleteSource endpoint.
	DeleteSourceDoer goahttp.Doer

	// GetSourceSettings Doer is the HTTP client used to make requests to the
	// GetSourceSettings endpoint.
	GetSourceSettingsDoer goahttp.Doer

	// UpdateSourceSettings Doer is the HTTP client used to make requests to the
	// UpdateSourceSettings endpoint.
	UpdateSourceSettingsDoer goahttp.Doer

	// RefreshSourceTokens Doer is the HTTP client used to make requests to the
	// RefreshSourceTokens endpoint.
	RefreshSourceTokensDoer goahttp.Doer

	// CreateSink Doer is the HTTP client used to make requests to the CreateSink
	// endpoint.
	CreateSinkDoer goahttp.Doer

	// GetSink Doer is the HTTP client used to make requests to the GetSink
	// endpoint.
	GetSinkDoer goahttp.Doer

	// GetSinkSettings Doer is the HTTP client used to make requests to the
	// GetSinkSettings endpoint.
	GetSinkSettingsDoer goahttp.Doer

	// UpdateSinkSettings Doer is the HTTP client used to make requests to the
	// UpdateSinkSettings endpoint.
	UpdateSinkSettingsDoer goahttp.Doer

	// ListSinks Doer is the HTTP client used to make requests to the ListSinks
	// endpoint.
	ListSinksDoer goahttp.Doer

	// UpdateSink Doer is the HTTP client used to make requests to the UpdateSink
	// endpoint.
	UpdateSinkDoer goahttp.Doer

	// DeleteSink Doer is the HTTP client used to make requests to the DeleteSink
	// endpoint.
	DeleteSinkDoer goahttp.Doer

	// GetTask Doer is the HTTP client used to make requests to the GetTask
	// endpoint.
	GetTaskDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the stream service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		APIRootIndexDoer:         doer,
		APIVersionIndexDoer:      doer,
		HealthCheckDoer:          doer,
		CreateSourceDoer:         doer,
		UpdateSourceDoer:         doer,
		ListSourcesDoer:          doer,
		GetSourceDoer:            doer,
		DeleteSourceDoer:         doer,
		GetSourceSettingsDoer:    doer,
		UpdateSourceSettingsDoer: doer,
		RefreshSourceTokensDoer:  doer,
		CreateSinkDoer:           doer,
		GetSinkDoer:              doer,
		GetSinkSettingsDoer:      doer,
		UpdateSinkSettingsDoer:   doer,
		ListSinksDoer:            doer,
		UpdateSinkDoer:           doer,
		DeleteSinkDoer:           doer,
		GetTaskDoer:              doer,
		CORSDoer:                 doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// APIRootIndex returns an endpoint that makes HTTP requests to the stream
// service ApiRootIndex server.
func (c *Client) APIRootIndex() goa.Endpoint {
	var (
		decodeResponse = DecodeAPIRootIndexResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAPIRootIndexRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.APIRootIndexDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "ApiRootIndex", err)
		}
		return decodeResponse(resp)
	}
}

// APIVersionIndex returns an endpoint that makes HTTP requests to the stream
// service ApiVersionIndex server.
func (c *Client) APIVersionIndex() goa.Endpoint {
	var (
		decodeResponse = DecodeAPIVersionIndexResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAPIVersionIndexRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.APIVersionIndexDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "ApiVersionIndex", err)
		}
		return decodeResponse(resp)
	}
}

// HealthCheck returns an endpoint that makes HTTP requests to the stream
// service HealthCheck server.
func (c *Client) HealthCheck() goa.Endpoint {
	var (
		decodeResponse = DecodeHealthCheckResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildHealthCheckRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HealthCheckDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "HealthCheck", err)
		}
		return decodeResponse(resp)
	}
}

// CreateSource returns an endpoint that makes HTTP requests to the stream
// service CreateSource server.
func (c *Client) CreateSource() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateSourceRequest(c.encoder)
		decodeResponse = DecodeCreateSourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateSourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateSourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "CreateSource", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSource returns an endpoint that makes HTTP requests to the stream
// service UpdateSource server.
func (c *Client) UpdateSource() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSourceRequest(c.encoder)
		decodeResponse = DecodeUpdateSourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "UpdateSource", err)
		}
		return decodeResponse(resp)
	}
}

// ListSources returns an endpoint that makes HTTP requests to the stream
// service ListSources server.
func (c *Client) ListSources() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSourcesRequest(c.encoder)
		decodeResponse = DecodeListSourcesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListSourcesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSourcesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "ListSources", err)
		}
		return decodeResponse(resp)
	}
}

// GetSource returns an endpoint that makes HTTP requests to the stream service
// GetSource server.
func (c *Client) GetSource() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSourceRequest(c.encoder)
		decodeResponse = DecodeGetSourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "GetSource", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSource returns an endpoint that makes HTTP requests to the stream
// service DeleteSource server.
func (c *Client) DeleteSource() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSourceRequest(c.encoder)
		decodeResponse = DecodeDeleteSourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "DeleteSource", err)
		}
		return decodeResponse(resp)
	}
}

// GetSourceSettings returns an endpoint that makes HTTP requests to the stream
// service GetSourceSettings server.
func (c *Client) GetSourceSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSourceSettingsRequest(c.encoder)
		decodeResponse = DecodeGetSourceSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSourceSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSourceSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "GetSourceSettings", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSourceSettings returns an endpoint that makes HTTP requests to the
// stream service UpdateSourceSettings server.
func (c *Client) UpdateSourceSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSourceSettingsRequest(c.encoder)
		decodeResponse = DecodeUpdateSourceSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSourceSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSourceSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "UpdateSourceSettings", err)
		}
		return decodeResponse(resp)
	}
}

// RefreshSourceTokens returns an endpoint that makes HTTP requests to the
// stream service RefreshSourceTokens server.
func (c *Client) RefreshSourceTokens() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshSourceTokensRequest(c.encoder)
		decodeResponse = DecodeRefreshSourceTokensResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRefreshSourceTokensRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshSourceTokensDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "RefreshSourceTokens", err)
		}
		return decodeResponse(resp)
	}
}

// CreateSink returns an endpoint that makes HTTP requests to the stream
// service CreateSink server.
func (c *Client) CreateSink() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateSinkRequest(c.encoder)
		decodeResponse = DecodeCreateSinkResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateSinkRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateSinkDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "CreateSink", err)
		}
		return decodeResponse(resp)
	}
}

// GetSink returns an endpoint that makes HTTP requests to the stream service
// GetSink server.
func (c *Client) GetSink() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSinkRequest(c.encoder)
		decodeResponse = DecodeGetSinkResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSinkRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSinkDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "GetSink", err)
		}
		return decodeResponse(resp)
	}
}

// GetSinkSettings returns an endpoint that makes HTTP requests to the stream
// service GetSinkSettings server.
func (c *Client) GetSinkSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSinkSettingsRequest(c.encoder)
		decodeResponse = DecodeGetSinkSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSinkSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSinkSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "GetSinkSettings", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSinkSettings returns an endpoint that makes HTTP requests to the
// stream service UpdateSinkSettings server.
func (c *Client) UpdateSinkSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSinkSettingsRequest(c.encoder)
		decodeResponse = DecodeUpdateSinkSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSinkSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSinkSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "UpdateSinkSettings", err)
		}
		return decodeResponse(resp)
	}
}

// ListSinks returns an endpoint that makes HTTP requests to the stream service
// ListSinks server.
func (c *Client) ListSinks() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSinksRequest(c.encoder)
		decodeResponse = DecodeListSinksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListSinksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSinksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "ListSinks", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSink returns an endpoint that makes HTTP requests to the stream
// service UpdateSink server.
func (c *Client) UpdateSink() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSinkRequest(c.encoder)
		decodeResponse = DecodeUpdateSinkResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSinkRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSinkDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "UpdateSink", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSink returns an endpoint that makes HTTP requests to the stream
// service DeleteSink server.
func (c *Client) DeleteSink() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSinkRequest(c.encoder)
		decodeResponse = DecodeDeleteSinkResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSinkRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSinkDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "DeleteSink", err)
		}
		return decodeResponse(resp)
	}
}

// GetTask returns an endpoint that makes HTTP requests to the stream service
// GetTask server.
func (c *Client) GetTask() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTaskRequest(c.encoder)
		decodeResponse = DecodeGetTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stream", "GetTask", err)
		}
		return decodeResponse(resp)
	}
}
