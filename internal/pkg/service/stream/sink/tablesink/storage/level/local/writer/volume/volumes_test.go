package volume

import (
	"context"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/benbjohnson/clock"
	"github.com/stretchr/testify/assert"

	"github.com/keboola/keboola-as-code/internal/pkg/log"
	"github.com/keboola/keboola-as-code/internal/pkg/service/stream/sink/tablesink/storage/level/local"
	"github.com/keboola/keboola-as-code/internal/pkg/service/stream/sink/tablesink/storage/volume"
)

func TestOpenVolumes(t *testing.T) {
	t.Parallel()

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	logger := log.NewDebugLogger()
	clk := clock.New()

	// Create volumes directories
	volumesPath := t.TempDir()
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "hdd", "1", "slices"), 0o750))
	assert.NoError(t, os.WriteFile(filepath.Join(volumesPath, "hdd", "some-file"), nil, 0o640))
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "HDD", "2"), 0o750))
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "hdd", "3"), 0o750))
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "SSD", "1"), 0o750))
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "ssd", "2"), 0o750))

	// Created also some drained volume
	assert.NoError(t, os.MkdirAll(filepath.Join(volumesPath, "drained", "1"), 0o750))
	assert.NoError(t, os.WriteFile(filepath.Join(volumesPath, "drained", "1", drainFile), []byte{}, 0o640))

	// Only two volumes has volume ID file
	assert.NoError(t, os.WriteFile(filepath.Join(volumesPath, "hdd", "1", local.VolumeIDFile), []byte("HDD_1"), 0o640))
	assert.NoError(t, os.WriteFile(filepath.Join(volumesPath, "HDD", "2", local.VolumeIDFile), []byte("HDD_2"), 0o640))

	// Start volumes opening
	var err error
	var volumes *Volumes
	done := make(chan struct{})
	go func() {
		defer close(done)
		volumes, err = OpenVolumes(ctx, logger, clk, "my-node", volumesPath)
		assert.NoError(t, err)
	}()

	// Wait for opening
	// Remaining volume ID files should be generated by the writer.Open.
	select {
	case <-done:
	// ok
	case <-time.After(5 * time.Second):
		assert.Fail(t, "timeout")
	}

	// Check opened volumes
	assert.Len(t, volumes.All(), 6)
	assert.Len(t, volumes.VolumeByType("foo"), 0)
	assert.Len(t, volumes.VolumeByType("hdd"), 3)
	assert.Len(t, volumes.VolumeByType("ssd"), 2)
	assert.Len(t, volumes.VolumeByType("drained"), 1)
	for _, id := range []volume.ID{"HDD_1", "HDD_2"} {
		vol, err := volumes.Volume(id)
		assert.NotNil(t, vol)
		assert.NoError(t, err)
	}
	for _, path := range []string{
		filepath.Join(volumesPath, "hdd", "3", local.VolumeIDFile),
		filepath.Join(volumesPath, "SSD", "1", local.VolumeIDFile),
		filepath.Join(volumesPath, "ssd", "2", local.VolumeIDFile),
		filepath.Join(volumesPath, "drained", "1", local.VolumeIDFile),
	} {
		content, err := os.ReadFile(path)
		assert.NoError(t, err)
		vol, err := volumes.Volume(volume.ID(content))
		assert.NotNil(t, vol)
		assert.NoError(t, err)
	}

	// Close volumes
	assert.NoError(t, volumes.Close(ctx))
}
