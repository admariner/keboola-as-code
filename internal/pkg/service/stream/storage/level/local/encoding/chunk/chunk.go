// Package chunk provides the Writer to split incoming bytes to chunks.
//
// Each chunks sizes is less or equal to the maximum chunk size.
//
// Active chunk is completed:
//   - If the requested Write operation exceeds the maximum chunk size: the active chunk has Aligned = false, remaining bytes are written to the new chunk.
//   - On the Flush method call: the active chunk has Aligned = true, and a new empty chunk is created.
//   - On the Close method call: the active chunks has Aligned = true, no new chunk is created.
//
// The chunks can be processed using the Writer.ProcessCompletedChunks method,
// for example, you can send them via a network connection.
//
// The Chunk.Aligned method can be used, to detect a chunk doesn't contain split data.
package chunk

import "bytes"

// Chunk of bytes.
type Chunk struct {
	buffer  *bytes.Buffer
	aligned bool
}

func newChunk(size int) *Chunk {
	return &Chunk{buffer: bytes.NewBuffer(make([]byte, 0, size))}
}

func (c *Chunk) Len() int {
	return c.buffer.Len()
}

func (c *Chunk) Bytes() []byte {
	return c.buffer.Bytes()
}

// Aligned is true if the chunk has been generated by the Writer.Flush or Writer.Close call.
func (c *Chunk) Aligned() bool {
	return c.aligned
}

func (c *Chunk) write(p []byte) (n int, err error) {
	return c.buffer.Write(p)
}

func (c *Chunk) reset() {
	c.buffer.Reset()
	c.aligned = false
}
