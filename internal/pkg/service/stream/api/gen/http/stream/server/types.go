// Code generated by goa v3.15.0, DO NOT EDIT.
//
// stream HTTP server types
//
// Command:
// $ goa gen github.com/keboola/keboola-as-code/api/stream --output
// ./internal/pkg/service/stream/api

package server

import (
	"fmt"
	"strings"
	"unicode/utf8"

	stream "github.com/keboola/keboola-as-code/internal/pkg/service/stream/api/gen/stream"
	"github.com/keboola/keboola-as-code/internal/pkg/service/stream/mapping/table/column"
	goa "goa.design/goa/v3/pkg"
)

// CreateSourceRequestBody is the type of the "stream" service "CreateSource"
// endpoint HTTP request body.
type CreateSourceRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceRequestBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP request body.
type UpdateSourceRequestBody struct {
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the source.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateSourceSettingsRequestBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP request body.
type UpdateSourceSettingsRequestBody struct {
	Patch []*SettingPatchRequestBody `form:"patch,omitempty" json:"patch,omitempty" xml:"patch,omitempty"`
}

// CreateSinkRequestBody is the type of the "stream" service "CreateSink"
// endpoint HTTP request body.
type CreateSinkRequestBody struct {
	// Optional ID, if not filled in, it will be generated from name. Cannot be
	// changed later.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table *TableSinkRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// UpdateSinkSettingsRequestBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP request body.
type UpdateSinkSettingsRequestBody struct {
	Patch []*SettingPatchRequestBody `form:"patch,omitempty" json:"patch,omitempty" xml:"patch,omitempty"`
}

// UpdateSinkRequestBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP request body.
type UpdateSinkRequestBody struct {
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the source.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Table sink configuration for "type" = "table".
	Table *TableSinkRequestBody `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
}

// APIVersionIndexResponseBody is the type of the "stream" service
// "ApiVersionIndex" endpoint HTTP response body.
type APIVersionIndexResponseBody struct {
	// Name of the API
	API string `form:"api" json:"api" xml:"api"`
	// URL of the API documentation.
	Documentation string `form:"documentation" json:"documentation" xml:"documentation"`
}

// CreateSourceResponseBody is the type of the "stream" service "CreateSource"
// endpoint HTTP response body.
type CreateSourceResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// UpdateSourceResponseBody is the type of the "stream" service "UpdateSource"
// endpoint HTTP response body.
type UpdateSourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks" json:"sinks" xml:"sinks"`
}

// ListSourcesResponseBody is the type of the "stream" service "ListSources"
// endpoint HTTP response body.
type ListSourcesResponseBody struct {
	Sources []*SourceResponseBody `form:"sources" json:"sources" xml:"sources"`
}

// GetSourceResponseBody is the type of the "stream" service "GetSource"
// endpoint HTTP response body.
type GetSourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks" json:"sinks" xml:"sinks"`
}

// GetSourceSettingsResponseBody is the type of the "stream" service
// "GetSourceSettings" endpoint HTTP response body.
type GetSourceSettingsResponseBody []*SettingResultResponse

// UpdateSourceSettingsResponseBody is the type of the "stream" service
// "UpdateSourceSettings" endpoint HTTP response body.
type UpdateSourceSettingsResponseBody []*SettingResultResponse

// RefreshSourceTokensResponseBody is the type of the "stream" service
// "RefreshSourceTokens" endpoint HTTP response body.
type RefreshSourceTokensResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks" json:"sinks" xml:"sinks"`
}

// CreateSinkResponseBody is the type of the "stream" service "CreateSink"
// endpoint HTTP response body.
type CreateSinkResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetSinkResponseBody is the type of the "stream" service "GetSink" endpoint
// HTTP response body.
type GetSinkResponseBody struct {
	ProjectID int     `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int     `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string  `form:"sourceId" json:"sourceId" xml:"sourceId"`
	SinkID    string  `form:"sinkId" json:"sinkId" xml:"sinkId"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// Table sink configuration for "type" = "table".
	Table    *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// GetSinkSettingsResponseBody is the type of the "stream" service
// "GetSinkSettings" endpoint HTTP response body.
type GetSinkSettingsResponseBody []*SettingResultResponse

// UpdateSinkSettingsResponseBody is the type of the "stream" service
// "UpdateSinkSettings" endpoint HTTP response body.
type UpdateSinkSettingsResponseBody []*SettingResultResponse

// ListSinksResponseBody is the type of the "stream" service "ListSinks"
// endpoint HTTP response body.
type ListSinksResponseBody struct {
	BranchID int                 `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID string              `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Sinks    []*SinkResponseBody `form:"sinks" json:"sinks" xml:"sinks"`
}

// UpdateSinkResponseBody is the type of the "stream" service "UpdateSink"
// endpoint HTTP response body.
type UpdateSinkResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// GetTaskResponseBody is the type of the "stream" service "GetTask" endpoint
// HTTP response body.
type GetTaskResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Task type.
	Type string `form:"type" json:"type" xml:"type"`
	// URL of the task.
	URL string `form:"url" json:"url" xml:"url"`
	// Task status, one of: processing, success, error
	Status string `form:"status" json:"status" xml:"status"`
	// Shortcut for status != "processing".
	IsFinished bool `form:"isFinished" json:"isFinished" xml:"isFinished"`
	// Date and time of the task creation.
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Date and time of the task end.
	FinishedAt *string `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
	// Duration of the task in milliseconds.
	Duration *int64                   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Result   *string                  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Error    *string                  `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	Outputs  *TaskOutputsResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
}

// CreateSourceStreamSourceAlreadyExistsResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.sourceAlreadyExists" error.
type CreateSourceStreamSourceAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSourceStreamResourceLimitReachedResponseBody is the type of the
// "stream" service "CreateSource" endpoint HTTP response body for the
// "stream.resourceLimitReached" error.
type CreateSourceStreamResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "GetSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSourceStreamSourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSource" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type DeleteSourceStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSourceSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "GetSourceSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSourceSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSourceSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSourceSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSourceSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// RefreshSourceTokensStreamSourceNotFoundResponseBody is the type of the
// "stream" service "RefreshSourceTokens" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type RefreshSourceTokensStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type CreateSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamSinkAlreadyExistsResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.sinkAlreadyExists" error.
type CreateSinkStreamSinkAlreadyExistsResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSinkStreamResourceLimitReachedResponseBody is the type of the "stream"
// service "CreateSink" endpoint HTTP response body for the
// "stream.resourceLimitReached" error.
type CreateSinkStreamResourceLimitReachedResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkStreamSourceNotFoundResponseBody is the type of the "stream" service
// "GetSink" endpoint HTTP response body for the "stream.sourceNotFound" error.
type GetSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "GetSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type GetSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkSettingsStreamSourceNotFoundResponseBody is the type of the "stream"
// service "GetSinkSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type GetSinkSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSinkSettingsStreamSinkNotFoundResponseBody is the type of the "stream"
// service "GetSinkSettings" endpoint HTTP response body for the
// "stream.sinkNotFound" error.
type GetSinkSettingsStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkSettingsStreamSourceNotFoundResponseBody is the type of the
// "stream" service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSinkSettingsStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkSettingsStreamSinkNotFoundResponseBody is the type of the "stream"
// service "UpdateSinkSettings" endpoint HTTP response body for the
// "stream.sinkNotFound" error.
type UpdateSinkSettingsStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// ListSinksStreamSourceNotFoundResponseBody is the type of the "stream"
// service "ListSinks" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type ListSinksStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "UpdateSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type UpdateSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "UpdateSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type UpdateSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSinkStreamSourceNotFoundResponseBody is the type of the "stream"
// service "DeleteSink" endpoint HTTP response body for the
// "stream.sourceNotFound" error.
type DeleteSinkStreamSourceNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSinkStreamSinkNotFoundResponseBody is the type of the "stream" service
// "DeleteSink" endpoint HTTP response body for the "stream.sinkNotFound" error.
type DeleteSinkStreamSinkNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTaskStreamTaskNotFoundResponseBody is the type of the "stream" service
// "GetTask" endpoint HTTP response body for the "stream.taskNotFound" error.
type GetTaskStreamTaskNotFoundResponseBody struct {
	// HTTP status code.
	StatusCode int `form:"statusCode" json:"statusCode" xml:"statusCode"`
	// Name of error.
	Name string `form:"error" json:"error" xml:"error"`
	// Error message.
	Message string `form:"message" json:"message" xml:"message"`
}

// TaskOutputsResponseBody is used to define fields on response body types.
type TaskOutputsResponseBody struct {
	// ID of the created/updated sink.
	SinkID *string `form:"sinkId,omitempty" json:"sinkId,omitempty" xml:"sinkId,omitempty"`
	// ID of the created/updated source.
	SourceID *string `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
}

// HTTPSourceResponseBody is used to define fields on response body types.
type HTTPSourceResponseBody struct {
	// URL of the HTTP source. Contains secret used for authentication.
	URL string `form:"url" json:"url" xml:"url"`
}

// VersionResponseBody is used to define fields on response body types.
type VersionResponseBody struct {
	// Version number counted from 1.
	Number int `form:"number" json:"number" xml:"number"`
	// Hash of the entity state.
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Date and time of the modification.
	ModifiedAt string `form:"modifiedAt" json:"modifiedAt" xml:"modifiedAt"`
	// Description of the change.
	Description string `form:"description" json:"description" xml:"description"`
}

// DeletedEntityResponseBody is used to define fields on response body types.
type DeletedEntityResponseBody struct {
	// Date and time of deletion.
	At string `form:"at" json:"at" xml:"at"`
	// Who deleted the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
}

// ByResponseBody is used to define fields on response body types.
type ByResponseBody struct {
	// Date and time of deletion.
	Type string `form:"type" json:"type" xml:"type"`
	// ID of the token.
	TokenID *string `form:"tokenId,omitempty" json:"tokenId,omitempty" xml:"tokenId,omitempty"`
	// ID of the user.
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Description of the user.
	UserDescription *string `form:"userDescription,omitempty" json:"userDescription,omitempty" xml:"userDescription,omitempty"`
}

// DisabledEntityResponseBody is used to define fields on response body types.
type DisabledEntityResponseBody struct {
	// Date and time of disabling.
	At string `form:"at" json:"at" xml:"at"`
	// Who disabled the entity, for example "system", "user", ...
	By *ByResponseBody `form:"by" json:"by" xml:"by"`
	// Why was the entity disabled?
	Reason string `form:"reason" json:"reason" xml:"reason"`
}

// SinkResponseBody is used to define fields on response body types.
type SinkResponseBody struct {
	ProjectID int     `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int     `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string  `form:"sourceId" json:"sourceId" xml:"sourceId"`
	SinkID    string  `form:"sinkId" json:"sinkId" xml:"sinkId"`
	Type      *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Human readable name of the sink.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// Table sink configuration for "type" = "table".
	Table    *TableSinkResponseBody      `form:"table,omitempty" json:"table,omitempty" xml:"table,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
}

// TableSinkResponseBody is used to define fields on response body types.
type TableSinkResponseBody struct {
	Mapping *TableMappingResponseBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// TableMappingResponseBody is used to define fields on response body types.
type TableMappingResponseBody struct {
	TableID string                     `form:"tableId" json:"tableId" xml:"tableId"`
	Columns []*TableColumnResponseBody `form:"columns" json:"columns" xml:"columns"`
}

// TableColumnResponseBody is used to define fields on response body types.
type TableColumnResponseBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey bool `form:"primaryKey" json:"primaryKey" xml:"primaryKey"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type column.Type `form:"type" json:"type" xml:"type"`
	// Column name.
	Name string `form:"name" json:"name" xml:"name"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateResponseBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateResponseBody is used to define fields on response body
// types.
type TableColumnTemplateResponseBody struct {
	Language string `form:"language" json:"language" xml:"language"`
	Content  string `form:"content" json:"content" xml:"content"`
}

// SourceResponseBody is used to define fields on response body types.
type SourceResponseBody struct {
	ProjectID int    `form:"projectId" json:"projectId" xml:"projectId"`
	BranchID  int    `form:"branchId" json:"branchId" xml:"branchId"`
	SourceID  string `form:"sourceId" json:"sourceId" xml:"sourceId"`
	Type      string `form:"type" json:"type" xml:"type"`
	// Human readable name of the source.
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the source.
	Description string `form:"description" json:"description" xml:"description"`
	// HTTP source details for "type" = "http".
	HTTP     *HTTPSourceResponseBody     `form:"http,omitempty" json:"http,omitempty" xml:"http,omitempty"`
	Version  *VersionResponseBody        `form:"version" json:"version" xml:"version"`
	Deleted  *DeletedEntityResponseBody  `form:"deleted,omitempty" json:"deleted,omitempty" xml:"deleted,omitempty"`
	Disabled *DisabledEntityResponseBody `form:"disabled,omitempty" json:"disabled,omitempty" xml:"disabled,omitempty"`
	Sinks    []*SinkResponseBody         `form:"sinks" json:"sinks" xml:"sinks"`
}

// SettingResultResponse is used to define fields on response body types.
type SettingResultResponse struct {
	// Key path.
	Key string `form:"key" json:"key" xml:"key"`
	// Value type.
	Type string `form:"type" json:"type" xml:"type"`
	// Actual value.
	Value any `form:"value" json:"value" xml:"value"`
	// Default value.
	DefaultValue any `form:"defaultValue" json:"defaultValue" xml:"defaultValue"`
	// True, if the default value is locally overwritten.
	Overwritten bool `form:"overwritten" json:"overwritten" xml:"overwritten"`
	// True, if only a super admin can modify the key.
	Protected bool `form:"protected" json:"protected" xml:"protected"`
	// Validation rules as a string definition.
	Validation *string `form:"validation,omitempty" json:"validation,omitempty" xml:"validation,omitempty"`
}

// SettingPatchRequestBody is used to define fields on request body types.
type SettingPatchRequestBody struct {
	// Key path.
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// A new key value. Use null to reset the value to the default value.
	Value any `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// TableSinkRequestBody is used to define fields on request body types.
type TableSinkRequestBody struct {
	Mapping *TableMappingRequestBody `form:"mapping,omitempty" json:"mapping,omitempty" xml:"mapping,omitempty"`
}

// TableMappingRequestBody is used to define fields on request body types.
type TableMappingRequestBody struct {
	TableID *string                   `form:"tableId,omitempty" json:"tableId,omitempty" xml:"tableId,omitempty"`
	Columns []*TableColumnRequestBody `form:"columns,omitempty" json:"columns,omitempty" xml:"columns,omitempty"`
}

// TableColumnRequestBody is used to define fields on request body types.
type TableColumnRequestBody struct {
	// Sets this column as a part of the primary key of the destination table.
	PrimaryKey *bool `form:"primaryKey,omitempty" json:"primaryKey,omitempty" xml:"primaryKey,omitempty"`
	// Column mapping type. This represents a static mapping (e.g. `body` or
	// `headers`), or a custom mapping using a template language (`template`).
	Type *column.Type `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Column name.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Template mapping details. Only for "type" = "template".
	Template *TableColumnTemplateRequestBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// TableColumnTemplateRequestBody is used to define fields on request body
// types.
type TableColumnTemplateRequestBody struct {
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	Content  *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// NewAPIVersionIndexResponseBody builds the HTTP response body from the result
// of the "ApiVersionIndex" endpoint of the "stream" service.
func NewAPIVersionIndexResponseBody(res *stream.ServiceDetail) *APIVersionIndexResponseBody {
	body := &APIVersionIndexResponseBody{
		API:           res.API,
		Documentation: res.Documentation,
	}
	return body
}

// NewCreateSourceResponseBody builds the HTTP response body from the result of
// the "CreateSource" endpoint of the "stream" service.
func NewCreateSourceResponseBody(res *stream.Task) *CreateSourceResponseBody {
	body := &CreateSourceResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewUpdateSourceResponseBody builds the HTTP response body from the result of
// the "UpdateSource" endpoint of the "stream" service.
func NewUpdateSourceResponseBody(res *stream.Source) *UpdateSourceResponseBody {
	body := &UpdateSourceResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		Type:        string(res.Type),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.HTTP != nil {
		body.HTTP = marshalStreamHTTPSourceToHTTPSourceResponseBody(res.HTTP)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewListSourcesResponseBody builds the HTTP response body from the result of
// the "ListSources" endpoint of the "stream" service.
func NewListSourcesResponseBody(res *stream.SourcesList) *ListSourcesResponseBody {
	body := &ListSourcesResponseBody{}
	if res.Sources != nil {
		body.Sources = make([]*SourceResponseBody, len(res.Sources))
		for i, val := range res.Sources {
			body.Sources[i] = marshalStreamSourceToSourceResponseBody(val)
		}
	} else {
		body.Sources = []*SourceResponseBody{}
	}
	return body
}

// NewGetSourceResponseBody builds the HTTP response body from the result of
// the "GetSource" endpoint of the "stream" service.
func NewGetSourceResponseBody(res *stream.Source) *GetSourceResponseBody {
	body := &GetSourceResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		Type:        string(res.Type),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.HTTP != nil {
		body.HTTP = marshalStreamHTTPSourceToHTTPSourceResponseBody(res.HTTP)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewGetSourceSettingsResponseBody builds the HTTP response body from the
// result of the "GetSourceSettings" endpoint of the "stream" service.
func NewGetSourceSettingsResponseBody(res stream.SettingsResult) GetSourceSettingsResponseBody {
	body := make([]*SettingResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalStreamSettingResultToSettingResultResponse(val)
	}
	return body
}

// NewUpdateSourceSettingsResponseBody builds the HTTP response body from the
// result of the "UpdateSourceSettings" endpoint of the "stream" service.
func NewUpdateSourceSettingsResponseBody(res stream.SettingsResult) UpdateSourceSettingsResponseBody {
	body := make([]*SettingResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalStreamSettingResultToSettingResultResponse(val)
	}
	return body
}

// NewRefreshSourceTokensResponseBody builds the HTTP response body from the
// result of the "RefreshSourceTokens" endpoint of the "stream" service.
func NewRefreshSourceTokensResponseBody(res *stream.Source) *RefreshSourceTokensResponseBody {
	body := &RefreshSourceTokensResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		Type:        string(res.Type),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.HTTP != nil {
		body.HTTP = marshalStreamHTTPSourceToHTTPSourceResponseBody(res.HTTP)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewCreateSinkResponseBody builds the HTTP response body from the result of
// the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkResponseBody(res *stream.Task) *CreateSinkResponseBody {
	body := &CreateSinkResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetSinkResponseBody builds the HTTP response body from the result of the
// "GetSink" endpoint of the "stream" service.
func NewGetSinkResponseBody(res *stream.Sink) *GetSinkResponseBody {
	body := &GetSinkResponseBody{
		ProjectID:   int(res.ProjectID),
		BranchID:    int(res.BranchID),
		SourceID:    string(res.SourceID),
		SinkID:      string(res.SinkID),
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Type != nil {
		type_ := string(*res.Type)
		body.Type = &type_
	}
	if res.Table != nil {
		body.Table = marshalStreamTableSinkToTableSinkResponseBody(res.Table)
	}
	if res.Version != nil {
		body.Version = marshalStreamVersionToVersionResponseBody(res.Version)
	}
	if res.Deleted != nil {
		body.Deleted = marshalStreamDeletedEntityToDeletedEntityResponseBody(res.Deleted)
	}
	if res.Disabled != nil {
		body.Disabled = marshalStreamDisabledEntityToDisabledEntityResponseBody(res.Disabled)
	}
	return body
}

// NewGetSinkSettingsResponseBody builds the HTTP response body from the result
// of the "GetSinkSettings" endpoint of the "stream" service.
func NewGetSinkSettingsResponseBody(res stream.SettingsResult) GetSinkSettingsResponseBody {
	body := make([]*SettingResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalStreamSettingResultToSettingResultResponse(val)
	}
	return body
}

// NewUpdateSinkSettingsResponseBody builds the HTTP response body from the
// result of the "UpdateSinkSettings" endpoint of the "stream" service.
func NewUpdateSinkSettingsResponseBody(res stream.SettingsResult) UpdateSinkSettingsResponseBody {
	body := make([]*SettingResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalStreamSettingResultToSettingResultResponse(val)
	}
	return body
}

// NewListSinksResponseBody builds the HTTP response body from the result of
// the "ListSinks" endpoint of the "stream" service.
func NewListSinksResponseBody(res *stream.SinksList) *ListSinksResponseBody {
	body := &ListSinksResponseBody{
		BranchID: int(res.BranchID),
		SourceID: string(res.SourceID),
	}
	if res.Sinks != nil {
		body.Sinks = make([]*SinkResponseBody, len(res.Sinks))
		for i, val := range res.Sinks {
			body.Sinks[i] = marshalStreamSinkToSinkResponseBody(val)
		}
	} else {
		body.Sinks = []*SinkResponseBody{}
	}
	return body
}

// NewUpdateSinkResponseBody builds the HTTP response body from the result of
// the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkResponseBody(res *stream.Task) *UpdateSinkResponseBody {
	body := &UpdateSinkResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewGetTaskResponseBody builds the HTTP response body from the result of the
// "GetTask" endpoint of the "stream" service.
func NewGetTaskResponseBody(res *stream.Task) *GetTaskResponseBody {
	body := &GetTaskResponseBody{
		ID:         string(res.ID),
		Type:       res.Type,
		URL:        res.URL,
		Status:     res.Status,
		IsFinished: res.IsFinished,
		CreatedAt:  res.CreatedAt,
		FinishedAt: res.FinishedAt,
		Duration:   res.Duration,
		Result:     res.Result,
		Error:      res.Error,
	}
	if res.Outputs != nil {
		body.Outputs = marshalStreamTaskOutputsToTaskOutputsResponseBody(res.Outputs)
	}
	return body
}

// NewCreateSourceStreamSourceAlreadyExistsResponseBody builds the HTTP
// response body from the result of the "CreateSource" endpoint of the "stream"
// service.
func NewCreateSourceStreamSourceAlreadyExistsResponseBody(res *stream.GenericError) *CreateSourceStreamSourceAlreadyExistsResponseBody {
	body := &CreateSourceStreamSourceAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSourceStreamResourceLimitReachedResponseBody builds the HTTP
// response body from the result of the "CreateSource" endpoint of the "stream"
// service.
func NewCreateSourceStreamResourceLimitReachedResponseBody(res *stream.GenericError) *CreateSourceStreamResourceLimitReachedResponseBody {
	body := &CreateSourceStreamResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSourceStreamSourceNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateSource" endpoint of the "stream" service.
func NewUpdateSourceStreamSourceNotFoundResponseBody(res *stream.GenericError) *UpdateSourceStreamSourceNotFoundResponseBody {
	body := &UpdateSourceStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSourceStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "GetSource" endpoint of the "stream" service.
func NewGetSourceStreamSourceNotFoundResponseBody(res *stream.GenericError) *GetSourceStreamSourceNotFoundResponseBody {
	body := &GetSourceStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSourceStreamSourceNotFoundResponseBody builds the HTTP response
// body from the result of the "DeleteSource" endpoint of the "stream" service.
func NewDeleteSourceStreamSourceNotFoundResponseBody(res *stream.GenericError) *DeleteSourceStreamSourceNotFoundResponseBody {
	body := &DeleteSourceStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSourceSettingsStreamSourceNotFoundResponseBody builds the HTTP
// response body from the result of the "GetSourceSettings" endpoint of the
// "stream" service.
func NewGetSourceSettingsStreamSourceNotFoundResponseBody(res *stream.GenericError) *GetSourceSettingsStreamSourceNotFoundResponseBody {
	body := &GetSourceSettingsStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSourceSettingsStreamSourceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateSourceSettings" endpoint of the
// "stream" service.
func NewUpdateSourceSettingsStreamSourceNotFoundResponseBody(res *stream.GenericError) *UpdateSourceSettingsStreamSourceNotFoundResponseBody {
	body := &UpdateSourceSettingsStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewRefreshSourceTokensStreamSourceNotFoundResponseBody builds the HTTP
// response body from the result of the "RefreshSourceTokens" endpoint of the
// "stream" service.
func NewRefreshSourceTokensStreamSourceNotFoundResponseBody(res *stream.GenericError) *RefreshSourceTokensStreamSourceNotFoundResponseBody {
	body := &RefreshSourceTokensStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkStreamSourceNotFoundResponseBody(res *stream.GenericError) *CreateSinkStreamSourceNotFoundResponseBody {
	body := &CreateSinkStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamSinkAlreadyExistsResponseBody builds the HTTP response
// body from the result of the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkStreamSinkAlreadyExistsResponseBody(res *stream.GenericError) *CreateSinkStreamSinkAlreadyExistsResponseBody {
	body := &CreateSinkStreamSinkAlreadyExistsResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSinkStreamResourceLimitReachedResponseBody builds the HTTP response
// body from the result of the "CreateSink" endpoint of the "stream" service.
func NewCreateSinkStreamResourceLimitReachedResponseBody(res *stream.GenericError) *CreateSinkStreamResourceLimitReachedResponseBody {
	body := &CreateSinkStreamResourceLimitReachedResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "GetSink" endpoint of the "stream" service.
func NewGetSinkStreamSourceNotFoundResponseBody(res *stream.GenericError) *GetSinkStreamSourceNotFoundResponseBody {
	body := &GetSinkStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkStreamSinkNotFoundResponseBody builds the HTTP response body from
// the result of the "GetSink" endpoint of the "stream" service.
func NewGetSinkStreamSinkNotFoundResponseBody(res *stream.GenericError) *GetSinkStreamSinkNotFoundResponseBody {
	body := &GetSinkStreamSinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkSettingsStreamSourceNotFoundResponseBody builds the HTTP response
// body from the result of the "GetSinkSettings" endpoint of the "stream"
// service.
func NewGetSinkSettingsStreamSourceNotFoundResponseBody(res *stream.GenericError) *GetSinkSettingsStreamSourceNotFoundResponseBody {
	body := &GetSinkSettingsStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetSinkSettingsStreamSinkNotFoundResponseBody builds the HTTP response
// body from the result of the "GetSinkSettings" endpoint of the "stream"
// service.
func NewGetSinkSettingsStreamSinkNotFoundResponseBody(res *stream.GenericError) *GetSinkSettingsStreamSinkNotFoundResponseBody {
	body := &GetSinkSettingsStreamSinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkSettingsStreamSourceNotFoundResponseBody builds the HTTP
// response body from the result of the "UpdateSinkSettings" endpoint of the
// "stream" service.
func NewUpdateSinkSettingsStreamSourceNotFoundResponseBody(res *stream.GenericError) *UpdateSinkSettingsStreamSourceNotFoundResponseBody {
	body := &UpdateSinkSettingsStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkSettingsStreamSinkNotFoundResponseBody builds the HTTP response
// body from the result of the "UpdateSinkSettings" endpoint of the "stream"
// service.
func NewUpdateSinkSettingsStreamSinkNotFoundResponseBody(res *stream.GenericError) *UpdateSinkSettingsStreamSinkNotFoundResponseBody {
	body := &UpdateSinkSettingsStreamSinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewListSinksStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "ListSinks" endpoint of the "stream" service.
func NewListSinksStreamSourceNotFoundResponseBody(res *stream.GenericError) *ListSinksStreamSourceNotFoundResponseBody {
	body := &ListSinksStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkStreamSourceNotFoundResponseBody(res *stream.GenericError) *UpdateSinkStreamSourceNotFoundResponseBody {
	body := &UpdateSinkStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewUpdateSinkStreamSinkNotFoundResponseBody builds the HTTP response body
// from the result of the "UpdateSink" endpoint of the "stream" service.
func NewUpdateSinkStreamSinkNotFoundResponseBody(res *stream.GenericError) *UpdateSinkStreamSinkNotFoundResponseBody {
	body := &UpdateSinkStreamSinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSinkStreamSourceNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteSink" endpoint of the "stream" service.
func NewDeleteSinkStreamSourceNotFoundResponseBody(res *stream.GenericError) *DeleteSinkStreamSourceNotFoundResponseBody {
	body := &DeleteSinkStreamSourceNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewDeleteSinkStreamSinkNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteSink" endpoint of the "stream" service.
func NewDeleteSinkStreamSinkNotFoundResponseBody(res *stream.GenericError) *DeleteSinkStreamSinkNotFoundResponseBody {
	body := &DeleteSinkStreamSinkNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewGetTaskStreamTaskNotFoundResponseBody builds the HTTP response body from
// the result of the "GetTask" endpoint of the "stream" service.
func NewGetTaskStreamTaskNotFoundResponseBody(res *stream.GenericError) *GetTaskStreamTaskNotFoundResponseBody {
	body := &GetTaskStreamTaskNotFoundResponseBody{
		StatusCode: res.StatusCode,
		Name:       res.Name,
		Message:    res.Message,
	}
	return body
}

// NewCreateSourcePayload builds a stream service CreateSource endpoint payload.
func NewCreateSourcePayload(body *CreateSourceRequestBody, branchID string, storageAPIToken string) *stream.CreateSourcePayload {
	v := &stream.CreateSourcePayload{
		Type:        stream.SourceType(*body.Type),
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.SourceID != nil {
		sourceID := stream.SourceID(*body.SourceID)
		v.SourceID = &sourceID
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSourcePayload builds a stream service UpdateSource endpoint payload.
func NewUpdateSourcePayload(body *UpdateSourceRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.UpdateSourcePayload {
	v := &stream.UpdateSourcePayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.Type != nil {
		type_ := stream.SourceType(*body.Type)
		v.Type = &type_
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSourcesPayload builds a stream service ListSources endpoint payload.
func NewListSourcesPayload(branchID string, storageAPIToken string) *stream.ListSourcesPayload {
	v := &stream.ListSourcesPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSourcePayload builds a stream service GetSource endpoint payload.
func NewGetSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.GetSourcePayload {
	v := &stream.GetSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteSourcePayload builds a stream service DeleteSource endpoint payload.
func NewDeleteSourcePayload(branchID string, sourceID string, storageAPIToken string) *stream.DeleteSourcePayload {
	v := &stream.DeleteSourcePayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSourceSettingsPayload builds a stream service GetSourceSettings
// endpoint payload.
func NewGetSourceSettingsPayload(branchID string, sourceID string, storageAPIToken string) *stream.GetSourceSettingsPayload {
	v := &stream.GetSourceSettingsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSourceSettingsPayload builds a stream service UpdateSourceSettings
// endpoint payload.
func NewUpdateSourceSettingsPayload(body *UpdateSourceSettingsRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.UpdateSourceSettingsPayload {
	v := &stream.UpdateSourceSettingsPayload{}
	if body.Patch != nil {
		v.Patch = make([]*stream.SettingPatch, len(body.Patch))
		for i, val := range body.Patch {
			v.Patch[i] = unmarshalSettingPatchRequestBodyToStreamSettingPatch(val)
		}
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewRefreshSourceTokensPayload builds a stream service RefreshSourceTokens
// endpoint payload.
func NewRefreshSourceTokensPayload(branchID string, sourceID string, storageAPIToken string) *stream.RefreshSourceTokensPayload {
	v := &stream.RefreshSourceTokensPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewCreateSinkPayload builds a stream service CreateSink endpoint payload.
func NewCreateSinkPayload(body *CreateSinkRequestBody, branchID string, sourceID string, storageAPIToken string) *stream.CreateSinkPayload {
	v := &stream.CreateSinkPayload{
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.SinkID != nil {
		sinkID := stream.SinkID(*body.SinkID)
		v.SinkID = &sinkID
	}
	if body.Type != nil {
		type_ := stream.SinkType(*body.Type)
		v.Type = &type_
	}
	if body.Table != nil {
		v.Table = unmarshalTableSinkRequestBodyToStreamTableSink(body.Table)
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSinkPayload builds a stream service GetSink endpoint payload.
func NewGetSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.GetSinkPayload {
	v := &stream.GetSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetSinkSettingsPayload builds a stream service GetSinkSettings endpoint
// payload.
func NewGetSinkSettingsPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.GetSinkSettingsPayload {
	v := &stream.GetSinkSettingsPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSinkSettingsPayload builds a stream service UpdateSinkSettings
// endpoint payload.
func NewUpdateSinkSettingsPayload(body *UpdateSinkSettingsRequestBody, branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.UpdateSinkSettingsPayload {
	v := &stream.UpdateSinkSettingsPayload{}
	if body.Patch != nil {
		v.Patch = make([]*stream.SettingPatch, len(body.Patch))
		for i, val := range body.Patch {
			v.Patch[i] = unmarshalSettingPatchRequestBodyToStreamSettingPatch(val)
		}
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewListSinksPayload builds a stream service ListSinks endpoint payload.
func NewListSinksPayload(branchID string, sourceID string, storageAPIToken string) *stream.ListSinksPayload {
	v := &stream.ListSinksPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewUpdateSinkPayload builds a stream service UpdateSink endpoint payload.
func NewUpdateSinkPayload(body *UpdateSinkRequestBody, branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.UpdateSinkPayload {
	v := &stream.UpdateSinkPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	if body.Type != nil {
		type_ := stream.SinkType(*body.Type)
		v.Type = &type_
	}
	if body.Table != nil {
		v.Table = unmarshalTableSinkRequestBodyToStreamTableSink(body.Table)
	}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewDeleteSinkPayload builds a stream service DeleteSink endpoint payload.
func NewDeleteSinkPayload(branchID string, sourceID string, sinkID string, storageAPIToken string) *stream.DeleteSinkPayload {
	v := &stream.DeleteSinkPayload{}
	v.BranchID = stream.BranchIDOrDefault(branchID)
	v.SourceID = stream.SourceID(sourceID)
	v.SinkID = stream.SinkID(sinkID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// NewGetTaskPayload builds a stream service GetTask endpoint payload.
func NewGetTaskPayload(branchID int, taskID string, storageAPIToken string) *stream.GetTaskPayload {
	v := &stream.GetTaskPayload{}
	tmpbranchID := stream.BranchID(branchID)
	v.BranchID = &tmpbranchID
	v.TaskID = stream.TaskID(taskID)
	v.StorageAPIToken = storageAPIToken

	return v
}

// ValidateCreateSourceRequestBody runs the validations defined on
// CreateSourceRequestBody
func ValidateCreateSourceRequestBody(body *CreateSourceRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", strings.Join(errContext, ".")))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "sourceId"), "."), *body.SourceID, utf8.RuneCountInString(*body.SourceID), 1, true))
		}
	}
	if body.SourceID != nil {
		if utf8.RuneCountInString(*body.SourceID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "sourceId"), "."), *body.SourceID, utf8.RuneCountInString(*body.SourceID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	return
}

// ValidateUpdateSourceRequestBody runs the validations defined on
// UpdateSourceRequestBody
func ValidateUpdateSourceRequestBody(body *UpdateSourceRequestBody, errContext []string) (err error) {
	if body.Type != nil {
		if !(*body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []any{"http"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	return
}

// ValidateUpdateSourceSettingsRequestBody runs the validations defined on
// UpdateSourceSettingsRequestBody
func ValidateUpdateSourceSettingsRequestBody(body *UpdateSourceSettingsRequestBody, errContext []string) (err error) {
	for i, e := range body.Patch {
		errContext := append(errContext, fmt.Sprintf(`patch[%d]`, i))
		if e != nil {
			if err2 := ValidateSettingPatchRequestBody(e, errContext); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateSinkRequestBody runs the validations defined on
// CreateSinkRequestBody
func ValidateCreateSinkRequestBody(body *CreateSinkRequestBody, errContext []string) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "sinkId"), "."), *body.SinkID, utf8.RuneCountInString(*body.SinkID), 1, true))
		}
	}
	if body.SinkID != nil {
		if utf8.RuneCountInString(*body.SinkID) > 48 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "sinkId"), "."), *body.SinkID, utf8.RuneCountInString(*body.SinkID), 48, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkRequestBody(body.Table, append(errContext, "table")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateSinkSettingsRequestBody runs the validations defined on
// UpdateSinkSettingsRequestBody
func ValidateUpdateSinkSettingsRequestBody(body *UpdateSinkSettingsRequestBody, errContext []string) (err error) {
	for i, e := range body.Patch {
		errContext := append(errContext, fmt.Sprintf(`patch[%d]`, i))
		if e != nil {
			if err2 := ValidateSettingPatchRequestBody(e, errContext); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateSinkRequestBody runs the validations defined on
// UpdateSinkRequestBody
func ValidateUpdateSinkRequestBody(body *UpdateSinkRequestBody, errContext []string) (err error) {
	if body.Type != nil {
		if !(*body.Type == "table") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []any{"table"}))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "name"), "."), *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "description"), "."), *body.Description, utf8.RuneCountInString(*body.Description), 4096, false))
		}
	}
	if body.Table != nil {
		if err2 := ValidateTableSinkRequestBody(body.Table, append(errContext, "table")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSettingPatchRequestBody runs the validations defined on
// SettingPatchRequestBody
func ValidateSettingPatchRequestBody(body *SettingPatchRequestBody, errContext []string) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", strings.Join(errContext, ".")))
	}
	if body.Key != nil {
		if utf8.RuneCountInString(*body.Key) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "key"), "."), *body.Key, utf8.RuneCountInString(*body.Key), 1, true))
		}
	}
	return
}

// ValidateTableSinkRequestBody runs the validations defined on
// TableSinkRequestBody
func ValidateTableSinkRequestBody(body *TableSinkRequestBody, errContext []string) (err error) {
	if body.Mapping != nil {
		if err2 := ValidateTableMappingRequestBody(body.Mapping, append(errContext, "mapping")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableMappingRequestBody runs the validations defined on
// TableMappingRequestBody
func ValidateTableMappingRequestBody(body *TableMappingRequestBody, errContext []string) (err error) {
	if body.TableID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tableId", strings.Join(errContext, ".")))
	}
	if body.Columns == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("columns", strings.Join(errContext, ".")))
	}
	if len(body.Columns) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "columns"), "."), body.Columns, len(body.Columns), 1, true))
	}
	if len(body.Columns) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "columns"), "."), body.Columns, len(body.Columns), 100, false))
	}
	for i, e := range body.Columns {
		errContext := append(errContext, fmt.Sprintf(`columns[%d]`, i))
		if e != nil {
			if err2 := ValidateTableColumnRequestBody(e, errContext); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTableColumnRequestBody runs the validations defined on
// TableColumnRequestBody
func ValidateTableColumnRequestBody(body *TableColumnRequestBody, errContext []string) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", strings.Join(errContext, ".")))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", strings.Join(errContext, ".")))
	}
	if body.Type != nil {
		if !(*body.Type == "id" || *body.Type == "datetime" || *body.Type == "ip" || *body.Type == "body" || *body.Type == "headers" || *body.Type == "template") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "type"), "."), *body.Type, []any{"id", "datetime", "ip", strings.Join(errContext, "."), "headers", "template"}))
		}
	}
	if body.Template != nil {
		if err2 := ValidateTableColumnTemplateRequestBody(body.Template, append(errContext, "template")); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTableColumnTemplateRequestBody runs the validations defined on
// TableColumnTemplateRequestBody
func ValidateTableColumnTemplateRequestBody(body *TableColumnTemplateRequestBody, errContext []string) (err error) {
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", strings.Join(errContext, ".")))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", strings.Join(errContext, ".")))
	}
	if body.Language != nil {
		if !(*body.Language == "jsonnet") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(strings.Join(append(errContext, "language"), "."), *body.Language, []any{"jsonnet"}))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "content"), "."), *body.Content, utf8.RuneCountInString(*body.Content), 1, true))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) > 4096 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(strings.Join(append(errContext, "content"), "."), *body.Content, utf8.RuneCountInString(*body.Content), 4096, false))
		}
	}
	return
}
