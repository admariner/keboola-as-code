package primarykey

import (
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"entgo.io/ent/entc/gen"
	"github.com/sirupsen/logrus"
	"golang.org/x/tools/go/packages"

	"github.com/keboola/keboola-as-code/internal/pkg/encoding/json"
	"github.com/keboola/keboola-as-code/internal/pkg/utils/errors"
)

const (
	entTemplatePackage      = "entgo.io/ent/entc/gen"
	entMutationTemplatePath = "template/builder/mutation.tmpl"
)

// customMutationTemplate returns modified mutation.tmpl.
// For modifications see the mutation.tmpl.patch file.
//
// Changes in the mutation.tmpl are required to:
// - Update the ID, when a part of the composed primary key is modified.
// - And vice versa, to update a part of the composed primary key if the ID is modified.
//
// To apply the patch, "git patch" tool is used.
// It is fuzzy, so minor changes in the entc library will not require changes in the patch.
//
// Patch can be generated by: git diff --patch --no-index -U20 ./mutation.tmpl.original ./mutation.tmpl > git.diff
// Patch can be applied by: git apply -v --recount --unsafe-paths --no-index git.diff.
func customMutationTemplate() *gen.Template {
	// Create temp dir
	tmpDir, err := os.MkdirTemp(os.TempDir(), "keboola-model-compiler")
	if err != nil {
		panic(err)
	}
	defer func() {
		if err := os.RemoveAll(tmpDir); err != nil {
			logrus.Warn(err)
		}
	}()

	// Load original template
	originalData := originalMutationTemplate()
	if err := os.WriteFile(filepath.Join(tmpDir, "mutation.tmpl"), originalData, 0o600); err != nil {
		panic(err)
	}

	// Load patch
	patchData := mutationTemplatePatch()
	if err := os.WriteFile(filepath.Join(tmpDir, "mutation.tmpl.patch"), patchData, 0o600); err != nil {
		panic(err)
	}

	// Apply patch
	cmd := exec.Command("git", "apply", "-v", "--recount", "--unsafe-paths", "--no-index", "mutation.tmpl.patch")
	cmd.Dir = tmpDir
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		panic(err)
	}

	// Load modified template
	modifiedData, err := os.ReadFile(filepath.Join(tmpDir, "mutation.tmpl"))
	if err != nil {
		panic(err)
	}

	mutationTmpl, err := loadTemplateFromString("mutation.tmpl", string(modifiedData), map[string]any{
		"KeyStruct": func(node *gen.Type) string {
			return keyPgkName + "." + keyStructName(node.Name)
		},
		"HasField": func(node *gen.Type, search *gen.Field) bool {
			for _, field := range node.Fields {
				if field.Name == search.Name {
					return true
				}
			}
			return false
		},
		"PKFields": func(v gen.Annotations) ([]PKFieldAnnotation, error) {
			if asMap, ok := v[pkAnnotationName].(map[string]any); ok {
				// asMap is PKAnnotation type serialized to a map
				annotation := PKAnnotation{}
				if err := json.ConvertByJSON(asMap, &annotation); err != nil {
					return nil, err
				}
				return annotation.Fields, nil
			}
			return nil, nil
		},
		"PKField": func(f *gen.Field) (*PKFieldAnnotation, error) {
			if asMap, ok := f.Annotations[pkFieldAnnotationName].(map[string]any); ok {
				// asMap is PKFieldAnnotation type serialized to a map
				annotation := PKFieldAnnotation{}
				if err := json.ConvertByJSON(asMap, &annotation); err != nil {
					return nil, err
				}
				return &annotation, nil
			}
			return nil, nil
		},
		"ParentEdge": func(node *gen.Type) *gen.Edge {
			for _, edge := range node.Edges {
				if edge.Name == ParentEdgeName {
					return edge
				}
			}
			return nil
		},
		"ParentEdgePKFields": func(e *gen.Edge) ([]PKFieldAnnotation, error) {
			if asMap, ok := e.Annotations[pkAnnotationName].(map[string]any); ok {
				// asMap is PKAnnotation type serialized to a map
				annotation := PKAnnotation{}
				if err := json.ConvertByJSON(asMap, &annotation); err != nil {
					return nil, err
				}
				return annotation.Fields, nil
			}
			return nil, nil
		},
	})
	if err != nil {
		panic(err)
	}

	return mutationTmpl
}

// mutationTemplatePatch loads the patch mutation.tmpl.patch for mutation.tmpl.
func mutationTemplatePatch() []byte {
	data, err := templateFs.ReadFile("template/mutation.tmpl.patch")
	if err != nil {
		panic(err)
	}
	return data
}

// originalMutationTemplate loads the original mutation.tmpl from the entc package.
func originalMutationTemplate() []byte {
	// Load information about package with the template
	pkgs, err := packages.Load(
		&packages.Config{Mode: packages.NeedEmbedFiles | packages.NeedName | packages.NeedModule},
		entTemplatePackage,
	)
	if err != nil {
		panic(err)
	}

	// Get the package
	pkg := pkgs[0]
	if pkg.Errors != nil {
		errs := errors.NewMultiError()
		for _, item := range pkg.Errors {
			errs.Append(errors.New(item.Error()))
		}
		panic(errs.ErrorOrNil())
	}

	// Compose template path
	pkgPath := pkg.Module.Dir + strings.ReplaceAll(entTemplatePackage, pkg.Module.Path, "")
	tmplPath := pkgPath + string(filepath.Separator) + entMutationTemplatePath

	// Load the template
	data, err := os.ReadFile(tmplPath)
	if err != nil {
		panic(err)
	}
	return data
}
