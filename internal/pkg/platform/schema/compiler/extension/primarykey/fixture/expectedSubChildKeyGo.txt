// Code generated by ent extension "primarykey", DO NOT EDIT.

package key

import (
	"database/sql/driver"
	"fmt"
	"github.com/keboola/keboola-as-code/internal/pkg/platform/schema/compiler/extension/primarykey/fixture"
	"strconv"
	"strings"
)

type SubChildKey struct {
	MyID       fixture.SomeString
	GroupID    fixture.SomeString
	CategoryID fixture.SomeInt
}

// String converts the key to string, it is required for ent validators.
func (v SubChildKey) String() string {
	var builder strings.Builder
	{
		builder.WriteString("MyID:")
		builder.WriteString(string(v.MyID))
	}
	{
		builder.WriteString("/")
		builder.WriteString("GroupID:")
		builder.WriteString(string(v.GroupID))
	}
	{
		builder.WriteString("/")
		builder.WriteString("CategoryID:")
		builder.WriteString(strconv.Itoa(int(v.CategoryID)))
	}
	return builder.String()
}

// Value converts Go struct to database string value.
func (v SubChildKey) Value() (driver.Value, error) {
	if err := v.Validate(); err != nil {
		return nil, err
	}
	return v.String(), nil
}

// Value converts string value from database to Go struct.
func (v *SubChildKey) Scan(in any) error {
	str, ok := in.(string)
	if !ok {
		return fmt.Errorf(`value "%#v" is not string`, in)
	}

	for _, item := range strings.Split(str, "/") {
		key, value, _ := strings.Cut(item, ":")
		switch key {
		case "MyID":
			v.MyID = fixture.SomeString(value)
		case "GroupID":
			v.GroupID = fixture.SomeString(value)
		case "CategoryID":
			valueInt, err := strconv.Atoi(value)
			if err != nil {
				return err
			}
			v.CategoryID = fixture.SomeInt(valueInt)
		default:
			return fmt.Errorf(`unexpected key part "%s"`, key)
		}
	}

	return v.Validate()
}

// Validate check that all parts of the key are not empty.
func (v SubChildKey) Validate() error {
	if v.MyID == "" {
		return fmt.Errorf(`key part "MyID" is not set`)
	}
	if v.GroupID == "" {
		return fmt.Errorf(`key part "GroupID" is not set`)
	}
	if v.CategoryID == 0 {
		return fmt.Errorf(`key part "CategoryID" is not set`)
	}
	return nil
}
