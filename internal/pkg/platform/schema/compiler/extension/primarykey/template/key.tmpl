// Code generated by ent extension "primarykey", DO NOT EDIT.

package key

import (
	"database/sql/driver"
	"fmt"
	"strconv"
	"strings"

{{- range $f := $.Imports }}
	"{{ . }}"
{{- end }}
)


type {{ $.KeyStruct }} struct {
{{- range $f := $.Fields }}
	{{ .PublicName }} {{ .GoType.Name }}
{{- end }}
}

// String converts the key to string, it is required for ent validators.
func (v {{ $.KeyStruct }}) String() string {
	var builder strings.Builder
	{{- range $i, $f := $.Fields }}
	{
		{{- if ne $i 0 }}
			builder.WriteString("/")
		{{- end }}
		builder.WriteString("{{ .PublicName }}:")
		{{- if eq .GoType.KindStr "int" }}
		builder.WriteString(strconv.Itoa(int(v.{{ .PublicName }})))
		{{- else }}
		builder.WriteString(string(v.{{ .PublicName }}))
		{{- end }}
	}
	{{- end }}
	return builder.String()
}

// Value converts Go struct to database string value.
func (v {{ $.KeyStruct }}) Value() (driver.Value, error) {
	if err := v.Validate(); err != nil {
		return nil, err
	}
	return v.String(), nil
}

// Value converts string value from database to Go struct.
func (v *{{ $.KeyStruct }}) Scan(in any) error {
	str, ok := in.(string)
	if !ok {
		return fmt.Errorf(`value "%#v" is not string`, in)
	}

	for _, item := range strings.Split(str, "/") {
		key, value, _ := strings.Cut(item, ":")
		switch key{
		{{- range $f := $.Fields }}
		case "{{ .PublicName }}":
			{{- if eq .GoType.KindStr "int" }}
			valueInt, err := strconv.Atoi(value)
			if err != nil {
				return err
			}
			v.{{ .PublicName }} = {{ .GoType.Name }}(valueInt)
			{{- else }}
			v.{{ .PublicName }} = {{ .GoType.Name }}(value)
			{{- end }}
		{{- end }}
		default:
			return fmt.Errorf(`unexpected key part "%s"`, key)
		}
	}

	return v.Validate()
}

// Validate check that all parts of the key are not empty.
func (v {{ $.KeyStruct }}) Validate() error {
	{{- range $f := $.Fields }}
	{{- if eq .GoType.KindStr "int" }}
	if v.{{ .PublicName }} == 0 {
		return fmt.Errorf(`key part "{{ .PublicName }}" is not set`)
	}
	{{- else }}
	if v.{{ .PublicName }} == "" {
		return fmt.Errorf(`key part "{{ .PublicName }}" is not set`)
	}
	{{- end }}
	{{- end }}
	return nil
}
