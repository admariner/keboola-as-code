// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BranchesColumns holds the columns for the "branches" table.
	BranchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "branch_id", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "is_default", Type: field.TypeBool},
	}
	// BranchesTable holds the schema information for the "branches" table.
	BranchesTable = &schema.Table{
		Name:       "branches",
		Columns:    BranchesColumns,
		PrimaryKey: []*schema.Column{BranchesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "branch_pk_field_branch_id",
				Unique:  false,
				Columns: []*schema.Column{BranchesColumns[1]},
			},
			{
				Name:    "branch_pk_composed",
				Unique:  true,
				Columns: []*schema.Column{BranchesColumns[1]},
			},
		},
	}
	// ConfigurationsColumns holds the columns for the "configurations" table.
	ConfigurationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "branch_id", Type: field.TypeInt},
		{Name: "component_id", Type: field.TypeString},
		{Name: "config_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "content", Type: field.TypeJSON},
		{Name: "configuration_parent", Type: field.TypeString},
	}
	// ConfigurationsTable holds the schema information for the "configurations" table.
	ConfigurationsTable = &schema.Table{
		Name:       "configurations",
		Columns:    ConfigurationsColumns,
		PrimaryKey: []*schema.Column{ConfigurationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "configurations_branches_parent",
				Columns:    []*schema.Column{ConfigurationsColumns[8]},
				RefColumns: []*schema.Column{BranchesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "configuration_pk_field_branch_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationsColumns[1]},
			},
			{
				Name:    "configuration_pk_field_component_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationsColumns[2]},
			},
			{
				Name:    "configuration_pk_field_config_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationsColumns[3]},
			},
			{
				Name:    "configuration_pk_composed",
				Unique:  true,
				Columns: []*schema.Column{ConfigurationsColumns[1], ConfigurationsColumns[2], ConfigurationsColumns[3]},
			},
		},
	}
	// ConfigurationRowsColumns holds the columns for the "configuration_rows" table.
	ConfigurationRowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "branch_id", Type: field.TypeInt},
		{Name: "component_id", Type: field.TypeString},
		{Name: "config_id", Type: field.TypeString},
		{Name: "row_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "content", Type: field.TypeJSON},
		{Name: "configuration_row_parent", Type: field.TypeString},
	}
	// ConfigurationRowsTable holds the schema information for the "configuration_rows" table.
	ConfigurationRowsTable = &schema.Table{
		Name:       "configuration_rows",
		Columns:    ConfigurationRowsColumns,
		PrimaryKey: []*schema.Column{ConfigurationRowsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "configuration_rows_configurations_parent",
				Columns:    []*schema.Column{ConfigurationRowsColumns[9]},
				RefColumns: []*schema.Column{ConfigurationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "configurationrow_pk_field_branch_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationRowsColumns[1]},
			},
			{
				Name:    "configurationrow_pk_field_component_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationRowsColumns[2]},
			},
			{
				Name:    "configurationrow_pk_field_config_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationRowsColumns[3]},
			},
			{
				Name:    "configurationrow_pk_field_row_id",
				Unique:  false,
				Columns: []*schema.Column{ConfigurationRowsColumns[4]},
			},
			{
				Name:    "configurationrow_pk_composed",
				Unique:  true,
				Columns: []*schema.Column{ConfigurationRowsColumns[1], ConfigurationRowsColumns[2], ConfigurationRowsColumns[3], ConfigurationRowsColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BranchesTable,
		ConfigurationsTable,
		ConfigurationRowsTable,
	}
)

func init() {
	ConfigurationsTable.ForeignKeys[0].RefTable = BranchesTable
	ConfigurationRowsTable.ForeignKeys[0].RefTable = ConfigurationsTable
}
