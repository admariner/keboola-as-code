// Code generated by ent extension "primarykey", DO NOT EDIT.

package key

import (
	"database/sql/driver"
	"fmt"
	"strconv"
	"strings"

	"github.com/keboola/go-client/pkg/keboola"
)

type BranchKey struct {
	BranchID keboola.BranchID
}

// String converts the key to string, it is required for ent validators.
func (v BranchKey) String() string {
	var builder strings.Builder
	{
		builder.WriteString("BranchID:")
		builder.WriteString(strconv.Itoa(int(v.BranchID)))
	}
	return builder.String()
}

// Value converts Go struct to database string value.
func (v BranchKey) Value() (driver.Value, error) {
	if err := v.Validate(); err != nil {
		return nil, err
	}
	return v.String(), nil
}

// Value converts string value from database to Go struct.
func (v *BranchKey) Scan(in any) error {
	str, ok := in.(string)
	if !ok {
		return fmt.Errorf(`value "%#v" is not string`, in)
	}

	for _, item := range strings.Split(str, "/") {
		key, value, _ := strings.Cut(item, ":")
		switch key {
		case "BranchID":
			valueInt, err := strconv.Atoi(value)
			if err != nil {
				return err
			}
			v.BranchID = keboola.BranchID(valueInt)
		default:
			return fmt.Errorf(`unexpected key part "%s"`, key)
		}
	}

	return v.Validate()
}

// Validate check that all parts of the key are not empty.
func (v BranchKey) Validate() error {
	if v.BranchID == 0 {
		return fmt.Errorf(`key part "BranchID" is not set`)
	}
	return nil
}
